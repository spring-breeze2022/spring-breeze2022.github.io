[{"title":"栈与队列（简单）","url":"/2022/05/04/栈与队列（简单）/","content":"\n### 例题一\n\n用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )\n\n**示例 1：**\n\n```java\n输入：\n[\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\"]\n[[],[3],[],[]]\n输出：\n[null,null,3,-1]\n```\n\n<!--more-->\n\n**示例 2：**\n\n```java\n输入：\n[\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"]\n[[],[],[5],[2],[],[]]\n输出：\n[null,-1,null,null,5,2]\n```\n\n**提示：**\n\n- `1 <= values <= 10000`\n- `最多会对 appendTail、deleteHead 进行 10000 次调用`\n\n#### 题解\n\n##### 解题思路\n\n- **栈无法实现队列功能:**\t栈为先进后出，队列为先进先出\n- **双栈可实现列表倒叙:**    用栈B元素实现对栈A的倒叙\n- **利用栈B删除队首元素**    B出栈相当于删除栈A的栈底元素，及队列首元素\n\n##### 函数设计\n\n- **加入队首`appendTail()`函数：**将数字val加入栈`A`即可。\n- **删除队尾`deleteHead()`:**分几种情况。\n  1. **当栈B不为空：**B中仍有已完成倒叙的元素，因此只需要返回B中的栈顶元素即可。\n  2. **否则，当A为空时：**当两个栈都为空时，无元素，返回-1。\n  3. **否则：**将栈A所有元素转移到栈B中，实现元素倒叙，并返回栈B元素的栈顶元素。\n\n##### 代码\n\n```java\nclass CQueue {\n    Stack<Integer> in,out;\n    public CQueue() {\n        in = new Stack<>();\n        out = new Stack<>();\n    }\n    \n    public void appendTail(int value) {\n        in.push(value);\n    }\n    \n    public int deleteHead() {\n        //当out栈不为空时，返回栈顶元素\n        if(!out.isEmpty()){\n            return out.pop();\n        }\n        //当in栈为空时，返回-1\n        if(in.isEmpty()){\n            return -1;\n        }\n        //当out栈为空时，将in栈中元素转到out栈中\n        while(!in.isEmpty()){\n            out.push(in.pop());\n        }\n        return out.pop();\n    }\n}\n```\n\n\n\n\n\n\n\n### 例题二\n\n定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。\n\n \n\n**示例:**\n\n```java\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.min();   --> 返回 -3.\nminStack.pop();\nminStack.top();      --> 返回 0.\nminStack.min();   --> 返回 -2.\n```\n\n**提示：**\n\n各函数的调用总次数不超过 20000 次\n\n\n\n#### 题解\n\n##### 解题思路\n\n对于栈来说，如果一个元素 `a` 在入栈时，栈里有其它的元素 `b, c, d`，那么无论这个栈在之后经历了什么操作，只要 `a` 在栈中，`b, c, d` 就一定在栈中，因为在 `a` 被弹出之前，b, c, d 不会被弹出。\n\n因此，在操作过程中的任意一个时刻，只要栈顶的元素是 a，那么我们就可以确定栈里面现在的元素一定是 `a, b, c, d`。\n\n那么，我们可以在每个元素 `a` 入栈时把当前栈的最小值 m 存储起来。在这之后无论何时，如果栈顶元素是 `a`，我们就可以直接返回存储的最小值 `m`。\n\n##### 算法\n\n按照上面的思路，我们只需要设计一个数据结构，使得每个元素`a`与其相应的最小值 `m` 时刻保持一一对应。因此我们可以使用一个辅助栈，与元素栈同步插入与删除，用于存储与每个元素对应的最小值。\n\n- 当一个元素要入栈时，我们取当前辅助栈的栈顶存储的最小值，与当前元素比较得出最小值，将这个最小值插入辅助栈中；\n\n\n- 当一个元素要出栈时，我们把辅助栈的栈顶元素也一并弹出；\n- 在任意一个时刻，栈内元素的最小值就存储在辅助栈的栈顶元素中。\n\n##### 代码\n\n```java\nclass MinStack {\n    /** initialize your data structure here. */\n\n    Stack<Integer> A,B;\n    public MinStack() {\n        A = new Stack<>();\n        B = new Stack<>();\n    }\n    \n    public void push(int x) {\n        A.push(x);\n        if(B.empty() || B.peek() >= x){\n            B.push(x);\n        }\n    }\n    \n    public void pop() {\n        if(A.pop().equals(B.peek())){\n            B.pop();\n        }\n    }\n    \n    public int top() {\n        return A.peek();\n    }\n    \n    public int min() {\n        return B.peek();\n    }\n}\n\n```\n\n","tags":["算法","栈与队列"],"categories":["LeetCode学习"]},{"title":"Hello World","url":"/2022/05/02/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n   <!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]