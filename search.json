[{"title":"搜索与回溯算法三","url":"/2022/05/23/搜索与回溯算法三/","content":"\n### 例题一\n\n给定一个 `m x n` 二维字符网格 `board` 和一个字符串单词 `word` 。如果 `word` 存在于网格中，返回 `true` ；否则，返回 `false` 。\n\n单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。\n\n例如，在下面的 3×4 的矩阵中包含单词 \"ABCCED\"（单词中的字母已标出）。\n\n![img](搜索与回溯算法三/1.jpg)\n\n\n\n**示例 1：**\n\n```java\n输入：board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\n输出：true\n```\n\n**示例 2：**\n\n```java\n输入：board = [[\"a\",\"b\"],[\"c\",\"d\"]], word = \"abcd\"\n输出：false\n```\n\n**提示：**\n\n- `1 <= board.length <= 200`\n- `1 <= board[i].length <= 200`\n- `board` 和 `word` 仅由大小写英文字母组成\n\n <!--more-->\n\n\n\n#### 题解\n\n##### 解题思路\n\n本问题是典型的矩阵搜索问题，可使用 **深度优先搜索（DFS）+ 剪枝** 解决。\n\n- **深度优先搜索：** 可以理解为暴力法遍历矩阵中所有字符串可能性。DFS 通过递归，先朝一个方向搜到底，再回溯至上个节点，沿另一个方向搜索，以此类推。\n\n- **剪枝：** 在搜索中，遇到 `这条路不可能和目标字符串匹配成功` 的情况（*例如：此矩阵元素和目标字符不同、此元素已被访问）*，则应立即返回，称之为 `可行性剪枝` 。\n\n<img src=\"搜索与回溯算法三/2.png\" style=\"zoom: 50%;\" />\n\n\n\n##### 算法设计\n\n**DFS解析：**\n\n- **递归参数：** 当前元素在矩阵 `board` 中的行列索引 `i` 和 `j` ，当前目标字符在 `word` 中的索引 `k` 。\n\n- **终止条件：**\n  1. 返回 $false$：(1) 行或列索引越界 **或** (2) 当前矩阵元素与目标字符不同 **或** (3) 当前矩阵元素已访问过 （ (3) 可合并至 (2) ） 。\n  2. 返回 $true$ ： `k = len(word) - 1` ，即字符串 `word` 已全部匹配。\n\n- **递推工作：**\n  1. 标记当前矩阵元素： 将 `board[i][j]` 修改为 **空字符** `'\\0'` ，代表此元素已访问过，防止之后搜索时重复访问。\n  2. 搜索下一单元格： 朝当前元素的 上、下、左、右 四个方向开启下层递归，使用 `||` 连接 （代表只需找到一条可行路径就直接返回，不再做后续 DFS ），并记录结果至 `res` 。\n  3. 还原当前矩阵元素： 将 `board[i][j]` 元素还原至初始值，即 `word[k]` 。\n\n```java\nclass Solution {\n    public boolean exist(char[][] board, String word) {\n        char[] words = word.toCharArray();\n        for(int i = 0; i < board.length; i++){\n            for(int j = 0; j < board[0].length; j++){\n                if(dfs(board, words, i, j, 0)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    boolean dfs (char[][] board,char[] word,int i,int j,int k){\n        if(i<0 || j<0 || i>=board.length || j>=board[0].length || board[i][j] != word[k])\n            return false;\n        if(k == word.length-1)\n            return true;\n        board[i][j] = '\\0';\n        boolean res = dfs(board,word,i,j+1,k+1) || dfs(board,word,i+1,j,k+1) || dfs(board,word,i,j-1,k+1) || dfs(board,word,i-1,j,k+1);\n        board[i][j] = word[k];\n        return res;\n    }\n}\n```\n\n-----\n\n\n\n### 例题二\n\n地上有一个m行n列的方格，从坐标 `[0,0]` 到坐标 `[m-1,n-1]` 。一个机器人从坐标 `[0, 0] `的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？\n\n**示例 1：**\n\n```java\n输入：m = 2, n = 3, k = 1\n输出：3\n```\n\n**示例 2：**\n\n```java\n输入：m = 3, n = 1, k = 0\n输出：1\n```\n\n**提示：**\n\n- `1 <= n,m <= 100`\n- `0 <= k <= 20`\n\n#### 题解\n\n##### 解题思路\n\n本题与 [矩阵中的路径](https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/solution/mian-shi-ti-12-ju-zhen-zhong-de-lu-jing-shen-du-yo/) 类似，是典型的搜索 & 回溯问题。在介绍回溯算法算法前，为提升计算效率，首先讲述前置工作： **数位之和计算** 。\n\n**数位之和计算：**\n\n设一数字 $x$ ，向下取整除法符号 $/$ ，求余符号 $⊙$ ，则有：\n\n- $x⊙10$ ：得到 $x$ 的个位数字；\n- $x / 10$ ： 令 $x$ 的十进制数向右移动一位，即删除个位数字。\n\n```java\nint he(int n){\n        int sum = 0;\n        while(n!=0){\n            sum+=n%10;\n            n/=10; \n        }\n        return sum;\n    }\n```\n\n**深度优先遍历 DFS**\n\n- **深度优先搜索：** 可以理解为暴力法模拟机器人在矩阵中的所有路径。DFS 通过递归，先朝一个方向搜到底，再回溯至上个节点，沿另一个方向搜索，以此类推。\n\n- **剪枝：** 在搜索中，遇到数位和超出目标值、此元素已访问，则应立即返回，称之为 `可行性剪枝` 。\n\n##### 算法设计\n\n- **递归参数：** 当前元素在矩阵中的行列索引 `i` 和 `j` ，两者的数位和 `si`, `sj` 。\n\n- **终止条件：** 当 $①$ 行列索引越界 **或** $②$ 数位和超出目标值 `k` **或** $③$ 当前元素已访问过 时，返回 $0$ ，代表不计入可达解。\n\n- **递推工作：**\n  - **标记当前单元格** ：将索引 `(i, j)` 存入 Set `visited` 中，代表此单元格已被访问过。\n  - **搜索下一单元格：** 计算当前元素的 **下、右** 两个方向元素的数位和，并开启下层递归 。\n- **回溯返回值：** 返回 `1 + 右方搜索的可达解总数 + 下方搜索的可达解总数`，代表从本单元格递归搜索的可达解总数。\n\n```java\nclass Solution {\n\n    int m, n, k;\n    boolean[][] visited;\n\n    public int movingCount(int m, int n, int k) {\n        this.m = m; this.n = n; this.k = k;\n        this.visited = new boolean[m][n];\n        return dfs(0, 0);\n    }\n\n    int dfs(int i, int j){\n        if(i < 0 || i >= m || j < 0 || j >= n || he(i) + he(j) > k || visited[i][j])  return 0;\n        visited[i][j] = true;\n        return 1 + dfs(i + 1, j) + dfs(i, j + 1);\n    }\n    \n    int he(int n){\n        int sum = 0;\n        while(n!=0){\n            sum+=n%10;\n            n/=10; \n        }\n        return sum;\n    }\n}\n```\n\n\n\n**广度优先遍历BFS也可，这里不做分析**\n\n-----\n\n\n\n### 例题三\n\n给你二叉树的根节点 `root` 和一个整数目标和 `targetSum` ，找出所有 **从根节点到叶子节点** 路径总和等于给定目标和的路径。\n\n**叶子节点** 是指没有子节点的节点。\n\n \n\n**示例 1：**\n\n![img](搜索与回溯算法三/3.jpg)\n\n```java\n输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n输出：[[5,4,11,2],[5,8,4,5]]\n```\n\n**示例 2：**\n\n![img](搜索与回溯算法三/4.jpg)\n\n```java\n输入：root = [1,2,3], targetSum = 5\n输出：[]\n```\n\n**示例3：**\n\n```java\n输入：root = [1,2], targetSum = 0\n输出：[]\n```\n\n**提示：**\n\n- 树中节点总数在范围 `[0, 5000]` 内\n- `-1000 <= Node.val <= 1000`\n- `-1000 <= targetSum <= 1000`\n\n#### 题解\n\n##### 解题思路\n\n本问题是典型的二叉树方案搜索问题，使用回溯法解决，其包含 **先序遍历 + 路径记录** 两部分。\n\n- **先序遍历：** 按照 “根、左、右” 的顺序，遍历树的所有节点。\n- **路径记录：** 在先序遍历中，记录从根节点到当前节点的路径。当路径为 $①$ 根节点到叶节点形成的路径 **且** $②$ 各节点值的和等于目标值 `sum` 时，将此路径加入结果列表。\n\n<img src=\"搜索与回溯算法三/5.png\" alt=\"Picture1.png\" style=\"zoom: 50%;\" />\n\n##### 算法流程\n\n**`pathSum(root, sum)` 函数：**\n\n- **初始化：** 结果列表 `res` ，路径列表 `path` 。\n- **返回值：** 返回 `res` 即可。\n\n**`resSum(root, tar) 函数：`**\n\n- **递推参数：** 当前节点 `root` ，当前目标值 `tar` 。\n\n- **终止条件：** 若节点 `root` 为空，则直接返回。\n- **递推工作：**\n  - 路径更新： 将当前节点值 `root.val` 加入路径 `path` ；\n  - 目标值更新： `tar = tar - root.val`（即目标值 `tar` 从 `sum` 减至 $0$ ）；\n  - 路径记录： 当 ① `root` 为叶节点 **且** ② 路径和等于目标值 ，则将此路径 `path` 加入 `res` 。\n  - 先序遍历： 递归左 / 右子节点。\n  - 路径恢复： 向上回溯前，需要将当前节点从路径 `path` 中删除，即执行 `path.pop()` 。\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    LinkedList<List<Integer>> res = new LinkedList<>();\n    LinkedList<Integer> push = new LinkedList<>();\n    public List<List<Integer>> pathSum(TreeNode root, int target) {\n        resSum(root,target);\n        return res;\n    }\n\n    void resSum(TreeNode root, int target){\n        if(root == null) return;\n        push.add(root.val);\n        target -= root.val;\n        if(target == 0 && root.right == null && root.left == null){\n            res.add(new LinkedList(push));\n        }\n        resSum(root.left,target);\n        resSum(root.right,target);\n        push.removeLast();\n    }\n}\n```\n\n----\n\n\n\n### 例题四\n\n输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。\n\n 为了让您更好地理解问题，以下面的二叉搜索树为例：\n\n<img src=\"搜索与回溯算法三/6.png\" alt=\"img\" style=\"zoom: 80%;\" />\n\n我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。\n\n下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。\n\n<img src=\"搜索与回溯算法三/7.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。\n\n#### 题解\n\n##### 解题思路\n\n本文解法基于性质：二叉搜索树的中序遍历为 **递增序列** 。\n\n将 二叉搜索树 转换成一个 “排序的循环双向链表” ，其中包含三个要素：\n\n1. **排序链表：** 节点应从小到大排序，因此应使用 **中序遍历** “从小到大”访问树的节点。\n2. **双向链表：** 在构建相邻节点的引用关系时，设前驱节点 `pre` 和当前节点 `cur` ，不仅应构建 `pre.right = cur` ，也应构建 `cur.left = pre` 。\n3. **循环链表：** 设链表头节点 `head` 和尾节点 `tail` ，则应构建 `head.left = tail` 和 `tail.right = head` 。\n\n<img src=\"搜索与回溯算法三/8.png\" alt=\"Picture1.png\" style=\"zoom: 50%;\" />\n\n**中序遍历** 为对二叉树作 “左、根、右” 顺序遍历，递归实现如下：\n\n```java\n// 打印中序遍历\nvoid dfs(Node root) {\n    if(root == null) return;\n    dfs(root.left); // 左\n    System.out.println(root.val); // 根\n    dfs(root.right); // 右\n}\n```\n\n根据以上分析，考虑使用中序遍历访问树的各节点 `cur` ；并在访问每个节点时构建 `cur` 和前驱节点 `pre` 的引用指向；中序遍历完成后，最后构建头节点和尾节点的引用指向即可。\n\n##### 算法设计\n\n**`dfs(cur):` 递归法中序遍历；**\n\n- **终止条件：** 当节点 `cur` 为空，代表越过叶节点，直接返回；\n- 递归左子树，即 `dfs(cur.left)` ；\n- **构建链表：**\n  1. **当 `pre` 为空时：** 代表正在访问链表头节点，记为 `head` ；\n  2. **当 `pre` 不为空时：** 修改双向节点引用，即 `pre.right = cur` ， `cur.left = pre` ；\n  3. **保存 `cur` ：** 更新 `pre = cur` ，即节点 `cur` 是后继节点的 `pre` ；\n- 递归右子树，即 `dfs(cur.right)` ；\n\n**`treeToDoublyList(root)：`**\n\n1. **特例处理：** 若节点 `root` 为空，则直接返回；\n2. **初始化：** 空节点 `pre` ；\n3. **转化为双向链表：** 调用 `dfs(root)` ；\n4. **构建循环链表：** 中序遍历完成后，`head` 指向头节点， `pre` 指向尾节点，因此修改 `head` 和 `pre` 的双向节点引用即可；\n5. **返回值：** 返回链表的头节点 `head` 即可；\n\n```java\n/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val,Node _left,Node _right) {\n        val = _val;\n        left = _left;\n        right = _right;\n    }\n};\n*/\nclass Solution {\n    Node head,pre;\n    public Node treeToDoublyList(Node root) {\n        if(root == null) return null;\n        dfs(root);\n        head.left = pre;\n        pre.right = head;\n        return head;\n    }\n\n    void dfs(Node cur){\n        if(cur == null) return;\n        dfs(cur.left);\n        if(pre == null){\n            head = cur;\n        }else{\n            cur.left = pre;\n            pre.right = cur;\n        }\n        pre = cur;\n        dfs(cur.right);\n    }\n}\n```\n\n----\n\n\n\n","tags":["算法","数组","数","深度优先搜索"],"categories":["LeetCode学习","搜索与回溯算法"]},{"title":"双指针","url":"/2022/05/22/双指针/","content":"\n\n\n### 例题一\n\n输入两个链表，找出它们的第一个公共节点。\n\n如下面的两个链表：\n\n​\t\t\t\t\t\t\t\t\t\t<img src=\"双指针/1.png\" alt=\"img\"  />\n\n在节点 c1 开始相交。\n\n\n\n**示例 1：**\n\n​\t\t\t\t\t\t\t\t\t\t <img src=\"双指针/2.png\" alt=\"img\"  />\n\n```java\n输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n输出：Reference of the node with value = 8\n输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n```\n\n\n\n**示例 2：**\n\n<img src=\"双指针/3.png\" alt=\"img\"  />\n\n```java\n输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n输出：Reference of the node with value = 2\n输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n```\n\n<!--more-->\n\n**示例 3：**\n\n![img](双指针/4.png)\n\n```java\n输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n输出：null\n输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n解释：这两个链表不相交，因此返回 null。\n```\n\n**注意：**\n\n- 如果两个链表没有交点，返回 `null`.\n- 在返回结果后，两个链表仍须保持原有的结构。\n- 可假定整个链表结构中没有循环。\n- 程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。\n\n#### 题解\n\n##### 解题思路\n\n设「第一个公共节点」为 `node` ，「链表 `headA`」的节点数量为 $a$ ，「链表 `headB`」的节点数量为 $b$ ，「两链表的公共尾部」的节点数量为 $c$ ，则有：\n\n头节点 `headA` 到 `node` 前，共有 $a - c$ 个节点；\n头节点 `headB` 到 `node` 前，共有 $b - c$ 个节点；\n\n<img src=\"双指针/5.png\" alt=\"Picture1.png\" style=\"zoom: 50%;\" />\n\n考虑构建两个节点指针 `A` , `B` 分别指向两链表头节点 `headA` , `headB`\n\n当头节点`nodeA`与头节点`nodeB`分别循环一遍自己的节点，并走一遍对方的公共节点前的节点，指针步长相同。即：\n\n- 指针 `A` 先遍历完链表 `headA` ，再开始遍历链表 `headB` ，当走到 `node` 时，共走步数为：\n\n$$\na + (b - c)\n$$\n\n- 指针 `B` 先遍历完链表 `headB` ，再开始遍历链表 `headA` ，当走到 `node` 时，共走步数为：\n\n$$\nb+(a−c)\n$$\n\n如下式所示，此时指针 `A` , `B` 重合，并有两种情况：\n$$\na + (b - c) = b + (a - c)\n$$\n\n1. 若两链表 **有** 公共尾部 (即 c > 0*c*>0 ) ：指针 `A` , `B` 同时指向「第一个公共节点」`node` 。\n2. 若两链表 **无** 公共尾部 (即 c = 0*c*=0 ) ：指针 `A` , `B` 同时指向 $null$ 。\n\n```java\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        ListNode A = headA, B = headB;\n        while (A != B) {\n            A = A != null ? A.next : headB;\n            B = B != null ? B.next : headA;\n        }\n        return A;\n    }\n}\n\n```\n\n----\n\n\n\n### 例题二\n\n输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串\"I am a student. \"，则输出\".student a am I\"。\n\n**示例 1：**\n\n```java\n输入: \"the sky is blue\"\n输出: \"blue is sky the\"\n```\n\n**示例 2：**\n\n```java\n输入: \"  hello world!  \"\n输出: \"world! hello\"\n解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n```\n\n**示例 3：**\n\n```java\n输入: \"a good   example\"\n输出: \"example good a\"\n解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n```\n\n**说明：**\n\n- 无空格字符构成一个单词。\n- 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n- 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n\n#### 题解\n\n##### 解题思路\n\n##### 算法解析：\n\n- 倒序遍历字符串 $s$，记录单词左右索引边界 $i$ , $j$；\n- 每确定一个单词的边界，则将其添加至单词列表 $res$；\n- 最终，将单词列表拼接为字符串，并返回即可。\n\n```java\nclass Solution {\n    public String reverseWords(String s) {\n        s = s.trim(); // 删除首尾空格\n        int j = s.length() - 1, i = j;\n        StringBuilder res = new StringBuilder();\n        while(i >= 0) {\n            while(i >= 0 && s.charAt(i) != ' ') i--; // 搜索首个空格\n            res.append(s.substring(i + 1, j + 1) + \" \"); // 添加单词\n            while(i >= 0 && s.charAt(i) == ' ') i--; // 跳过单词间空格\n            j = i; // j 指向下个单词的尾字符\n        }\n        return res.toString().trim(); // 转化为字符串并返回\n    }\n}\n\n```\n\n----\n\n\n\n> 参考来源：力扣（LeetCode）\n>\n> 作者：jyd\n\n","tags":["算法","数组","双指针","链表"],"categories":["LeetCode学习","双指针"]},{"title":"动态规划二","url":"/2022/05/20/动态规划二/","content":"\n### 例题一\n\n给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。\n\n \n\n**示例 1:**\n\n```java\n输入: 12258\n输出: 5\n解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"\n```\n\n\n\n**提示：**\n\n`0 <= num < 231`\n\n<!--more-->\n\n\n\n#### 题解\n\n##### 解题思路\n\n本题使用动态规划，及通过前一步状态推导下一步状态，由题意可推导转移方程，流程如下图。\n\n<img src=\"动态规划二/1.png\" alt=\"Picture1.png\" style=\"zoom: 50%;\" />\n\n\n\n##### 算法流程\n\n- **状态定义：**设动态规划列表 $dp$ ，$dp[i]$ 代表以 $x_i$ 为结尾的数字的翻译方案数量。\n\n- **转移方程：**若 $x_i$和 $x_{i-1}$组成的两位数字可以被翻译，则$dp[i] = dp[i - 1] + dp[i - 2]$；否则 $dp[i] = dp[i - 1]$。\n\n  可被翻译的两位数区间：当 $x_{i-1} = 0$时，组成的两位数是无法被翻译的（例如 $00, 01, 02, \\cdots$），因此区间为 $[10, 25]$。\n  $dp[i] = \\begin{cases} dp[i - 1] + dp[i - 2] & {, 10 x_{i-1} + x_i \\in [10,25]} \\\\ dp[i - 1] & {, 10 x_{i-1} + x_i \\in [0, 10) \\cup (25, 99]} \\end{cases}$\n\n- **返回值：**$dp[n]$，及此数字的翻译方案数量。\n\n- **初始状态：**$dp[0]=dp[1]=1$，即 “无数字” 和 “第 1 位数字” 的翻译方法数量均为 1 。\n\n- **空间优化：**$dp[i],dp[i - 1]$，所以可使用两个变量 p,q 分别记录 $dp[i], dp[i - 1]$，两变量交替前进即可。此方法可省去 $dp$ 列表使用的 $O(N)$ 的额外空间。\n\n\n\n```java\nclass Solution {\n    public int translateNum(int num) {\n        String s = String.valueOf(num);\n        int p = 1,q = 1;\n        for(int i = 2;i <= s.length();i++){\n            String nums = s.substring(i-2, i);\n            int c = nums.compareTo(\"10\") >= 0 && nums.compareTo(\"25\") <=0 ? p + q : q;\n            p = q;\n            q = c;\n        }\n        return q;\n    }\n}\n```\n\n-----\n\n\n\n### 例题二\n\n请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。\n\n \n\n**示例 1:**\n\n```java\n输入: \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n```\n\n**示例 2:**\n\n```java\n输入: \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n```\n\n**示例 3:**\n\n```java\n输入: \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n\n**提示：**\n\n`s.length <= 40000`\n\n#### 题解\n\n##### 解题思路一：动态规划 + 哈希表\n\n使用动态规划记录每增加一个字符的“最长不重复子字符串” 的长度是多少。\n\n**动态规划解析：**\n\n- **状态定义：** 设动态规划列表 $dp$ ，$dp[j]$代表以字符 $s[j]$ 为结尾的 “最长不重复子字符串” 的长度。\n- **转移方程：** 固定右边界 $j$ ，设字符 $s[j]$ 左边距离最近的相同字符为 $s[i]$ ，即 $s[i] = s[j]$ 。\n  - 当 $i < 0$，即 $s[j]$ 左边无相同字符，则 $dp[j] = dp[j-1] + 1$；\n  - 当 $dp[j - 1] < j - i$，说明字符 $s[i]$ 在子字符串 $dp[j-1]$ **区间之外** ，则 $dp[j] = dp[j - 1] + 1$ ；\n  - 当 $dp[j - 1] \\geq j - i$，说明字符 $s[i]$ 在子字符串 $dp[j-1]$ **区间之中** ，则 $dp[j]$的左边界由 $s[i]$ 决定，即 $dp[j] = j - i$；\n  - 当 $i < 0$ 时，由于 $dp[j - 1] \\leq j$ 恒成立，因而 $dp[j - 1] < j - i$ 恒成立，因此分支 `1.` 和 `2.` 可被合并。\n\n$$\ndp[j] = \\begin{cases} dp[j - 1] + 1 & , dp[j-1] < j - i \\\\ j - i & , dp[j-1] \\geq j - i \\end{cases}\n$$\n\n- **返回值：** $\\max(dp)$，即全局的 “最长不重复子字符串” 的长度。\n\n<img src=\"动态规划二/2.png\" alt=\"Picture1.png\" style=\"zoom: 67%;\" />\n\n**优化空间复杂度**\n\n- 由于返回值是取 $dp$ 列表最大值，因此可借助变量 $tmp$ 存储 $dp[j]$ ，变量 $res$ 每轮更新最大值即可。\n- 此优化可节省 $dp$ 列表使用的 $O(N)$ 大小的额外空间。\n\n**哈希表**\n\n- 哈希表统计： 遍历字符串 $s$ 时，使用哈希表（记为 $dic$ ）统计 各字符最后一次出现的索引位置 。\n- 左边界 $i$ 获取方式： 遍历到 $s[j]$ 时，可通过访问哈希表 $dic[s[j]]$ 获取最近的相同字符的索引 $i$ 。\n\n\n\n```java\n\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        Map<Character, Integer> dic = new HashMap<>();\n        int res = 0, tmp = 0;\n        for(int j = 0; j < s.length(); j++) {\n            int i = dic.getOrDefault(s.charAt(j), -1); // 获取索引 i\n            dic.put(s.charAt(j), j); // 更新哈希表\n            tmp = tmp < j - i ? tmp + 1 : j - i; // dp[j - 1] -> dp[j]\n            res = Math.max(res, tmp); // max(dp[j - 1], dp[j])\n        }\n        return res;\n    }\n}\n\n```\n\n\n\n##### 解题思路二：滑动窗口\n\n找出**从每一个字符开始的，不包含重复字符的最长子串**，那么其中最长的那个字符串即为答案。对于示例一中的字符串，我们列举出这些结果，其中括号中表示选中的字符以及最长的字符串：\n\n- 使用两个指针表示字符串中的某个子串（或窗口）的左右边界，其中左指针代表着「枚举子串的起始位置」，而右指针即为最长子串结束位置的 $r_k$；\n\n- 在每一步的操作中，将左指针向右移动一格，表示开始枚举下一个字符作为起始位置，然后不断地向右移动右指针，但需要保证这两个指针对应的子串中没有重复的字符。在移动结束后，这个子串就对应着 以左指针开始的，不包含重复字符的最长子串。记录下这个子串的长度；\n- 在枚举结束后，找到的最长的子串的长度即为答案。\n\n**判断重复字符**\n\n在上面的流程中，还需要使用一种数据结构来判断 **是否有重复的字符**，常用的数据结构为哈希集合（即 C++ 中的 std::unordered_set，Java 中的 HashSet，Python 中的 set, JavaScript 中的 Set）。在左指针向右移动的时候，从哈希集合中移除一个字符，在右指针向右移动的时候，往哈希集合中添加一个字符。\n\n\n\n```java\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        // 哈希集合，记录每个字符是否出现过\n        Set<Character> occ = new HashSet<Character>();\n        int n = s.length();\n        // 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动\n        int rk = -1, ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if (i != 0) {\n                // 左指针向右移动一格，移除一个字符\n                occ.remove(s.charAt(i - 1));\n            }\n            while (rk + 1 < n && !occ.contains(s.charAt(rk + 1))) {\n                // 不断地移动右指针\n                occ.add(s.charAt(rk + 1));\n                ++rk;\n            }\n            // 第 i 到 rk 个字符是一个极长的无重复字符子串\n            ans = Math.max(ans, rk - i + 1);\n        }\n        return ans;\n    }\n}\n```\n\n\n\n> 参考来源：力扣（LeetCode）\n>\n> 作者：jyd、LeetCode-Solution\n\n","tags":["算法","动态规划","字符串"],"categories":["LeetCode学习","动态规划"]},{"title":"动态规划","url":"/2022/05/19/动态规划/","content":"\n\n\n### 例题一\n\n写一个函数，输入`n`，求斐波那契（Fibonacci）数列的第 `n` 项（即 `F(N)`）。斐波那契数列的定义如下：\n\n```java\nF(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1.\n```\n\n\n斐波那契数列由 `0` 和 `1` 开始，之后的斐波那契数就是由之前的两数相加而得出。\n\n答案需要取模 `1e9+7(1000000007)`，如计算初始结果为：`1000000008`，请返回 `1`。\n\n \n\n**示例 1：**\n\n```java\n输入：n = 2\n输出：1\n```\n\n**示例 2：**\n\n```java\n输入：n = 5\n输出：5\n```\n\n**提示：**\n\n- `0 <= n <= 100`\n\n<!--more-->\n\n#### 题解\n\n##### 解题思路\n\n斐波那契数列的定义是 *f*(*n*+1)=*f*(*n*)+*f*(*n*−1) ，生成第 *n* 项的做法有以下几种：\n\n1. **递归法：**\n   - 把*f*(*n*+1)拆分为*f*(*n*)和*f*(*n*−1)两个式子计算，递归计算，直到*f*(0)和*f*(1)为终止条件。\n   - **缺点：** 需要进行大量递归计算，时间复杂度为$O(2^n)$;\n2. **动态规划：**\n   - **原理：** 以斐波那契数列性质 f*(*n*+1)=*f*(*n*)+*f*(*n*−1) 为转移方程。\n\n\n\n##### 算法流程\n\n**动态规划解析：**\n\n- **状态定义：** 设 *dp* 为一维数组，其中 *dp[i]* 的值代表 斐波那契数列第 *i* 个数字 。\n\n- **转移方程：** *dp[i+1]=dp[i]+dp[i−1]* ，即对应数列定义 *f(n+1)=f(n)+f(n−1)* ；\n\n- **初始状态：** *dp[0]=0*,*dp[1]=1* ，即初始化前两个数字；\n\n- **返回值：** *dp[n]* ，即斐波那契数列的第 *n* 个数字。\n\n  **需要对结果循环求余：**防止因*n*的增大，*f(n)*会超过`Int32`甚至`Int64`的取值范围，导致结果错误。\n\n\n\n```java\nclass Solution {\n    public int fib(int n) {\n        if (n < 2) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for(int i = 2; i <= n; i++){\n            int sum = (a + b)%1000000007;\n            a = b;\n            b = sum;\n        }\n        return b;\n    }\n}\n```\n\n----\n\n\n\n### 例题二\n\n假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？\n\n \n\n**示例 1:**\n\n```java\n输入: [7,1,5,3,6,4]\n输出: 5\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。\n```\n\n**示例 2:**\n\n```java\n输入: [7,6,4,3,1]\n输出: 0\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。\n```\n\n**限制：**\n\n`0 <= 数组长度 <= 10^5`\n\n\n\n#### 题解\n\n##### 解题思路\n\n在题目中，我们只要用一个变量记录一个历史最低价格 `minprice`，我们就可以假设自己的股票是在那天买的。那么我们在第 i 天卖出股票能得到的利润就是 `prices[i] - minprice`。\n\n因此，我们只需要遍历价格数组一遍，记录历史最低点，然后在每一天考虑这么一个问题：如果我是在历史最低点买进的，那么我今天卖出能赚多少钱？当考虑完所有天数之时，我们就得到了最好的答案。\n\n##### 算法步骤\n\n- **初始化：**定义最低价为一个最大整型数`minprice = Integer.MAX_VALUE`,定义盈利`maxprofit = 0`;\n- **遍历：**求出当前时间段的最低价与最大盈利；\n- **返回值：**返回最大盈利值。\n\n```java\npublic class Solution {\n    public int maxProfit(int prices[]) {\n        int minprice = Integer.MAX_VALUE;\n        int maxprofit = 0;\n        for (int i = 0; i < prices.length; i++) {\n            if (prices[i] < minprice) {\n                minprice = prices[i];\n            } else if (prices[i] - minprice > maxprofit) {\n                maxprofit = prices[i] - minprice;\n            }\n        }\n        return maxprofit;\n    }\n}\n```\n\n----\n\n\n\n### 例题三\n\n在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？\n\n \n\n**示例 1:**\n\n```java\n输入: \n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n输出: 12\n解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物\n```\n\n**提示：**\n\n- `0 < grid.length <= 200`\n- `0 < grid[0].length <= 200`\n\n\n\n#### 题解\n\n##### 解题思路\n\n题目说明：从棋盘的左上角开始拿格子里的礼物，并每次 **向右** 或者 **向下** 移动一格、直到到达棋盘的右下角。\n根据题目说明，易得某单元格只可能从上边单元格或左边单元格到达。\n\n设 $f(i,j)$ 为从棋盘左上角走至单元格 (i ,j)(i,j) 的礼物最大累计价值，易得到以下递推关系：$f(i,j)$ 等于 $f(i,j-1)$ 和 $f(i-1,j)$ 中的较大值加上当前单元格礼物价值 $grid(i,j)$ 。\n\n​        $f(i,j) = \\max[f(i,j-1), f(i-1,j)] + grid(i,j)$\n\n因此，可用动态规划解决此问题，以上公式便为转移方程。\n\n<img src=\"动态规划/1.png\" alt=\"Picture1.png\" style=\"zoom: 67%;\" />\n\n\n\n##### 算法步骤\n\n- **状态定义：** 设动态规划矩阵 dpdp ，dp(i,j)dp(i,j) 代表从棋盘的左上角开始，到达单元格 (i,j)(i,j) 时能拿到礼物的最大累计价值。\n\n- **转移方程：**\n\n  - 当 $i = 0$ 且 $j = 0$ 时，为起始元素；\n\n  - 当 $i = 0$ 且 $j \\ne 0$ 时，为矩阵第一行元素，只可从左边到达；\n\n  - 当 $i \\ne 0$ 且 $j = 0$ 时，为矩阵第一列元素，只可从上边到达；\n\n  - 当 $i \\ne 0$ 且 $j \\ne 0$ 时，可从左边或上边到达；\n    $$\n    dp(i,j)= \\begin{cases} grid(i,j) & {,i=0, j=0}\\\\ grid(i,j) + dp(i,j-1) & {,i=0, j \\ne 0}\\\\ grid(i,j) + dp(i-1,j) & {,i \\ne 0, j=0}\\\\ grid(i,j) + \\max[dp(i-1,j),dp(i,j-1)]& ,{i \\ne 0, j \\ne 0} \\end{cases}\n    $$\n    \n\n- **初始状态：** $dp[0][0] = grid[0][0]$，即到达单元格 $(0,0)$ 时能拿到礼物的最大累计价值为 $grid[0][0]$ ；\n- **返回值：** $dp[m-1][n-1]$，$m, n$ 分别为矩阵的行高和列宽，即返回 $dp$ 矩阵右下角元素。\n\n**可直接在原矩阵中进行修改，省去$dp$矩阵使用的额外空间，空间复杂度从$O(MN)$降低位$O(1)$**\n\n\n\n```java\nclass Solution {\n    public int maxValue(int[][] grid) {\n        int n = grid[0].length;\n        int m = grid.length;\n        for(int i = 0; i< m;i++){\n           for(int j = 0;j < n;j++){\n               if(i == 0 && j == 0){\n                    continue;\n               }\n                if(i == 0){\n                    grid[i][j] += grid[i][j - 1] ;\n                }else if(j == 0){\n                    grid[i][j] += grid[i - 1][j];\n                }else{\n                    grid[i][j] += Math.max(grid[i][j - 1], grid[i - 1][j]);\n                } \n           }\n        }\n        return grid[m-1][n-1];\n    }\n}\n```\n\n---\n\n> 参考来源：力扣（LeetCode）\n>\n> 作者：jyd、LeetCode-Solution\n\n","tags":["算法","数组","动态规划"],"categories":["LeetCode学习","动态规划"]},{"title":"搜索与回溯算法二","url":"/2022/05/16/搜索与回溯算法二/","content":"\n### 例题一\n\n输入两棵二叉树*A*和*B*，判断*B*是不是*A*的子结构。(约定空树不是任意一个树的子结构)\n\n*B*是*A*的子结构， 即 *A*中有出现和*B*相同的结构和节点值。\n\n**例如:**\n给定的树 *A*:\n\n```java\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n```\n\n给定的树 *B*：\n\n```java\n   4 \n  /\n 1\n```\n\n返回 `true`，因为 *B* 与 *A* 的一个子树拥有相同的结构和节点值。\n\n**示例 1：**\n\n```java\n输入：A = [1,2,3], B = [3,1]\n输出：false\n```\n\n**示例 2：**\n\n```java\n输入：A = [3,4,5,1,2], B = [4,1]\n输出：true\n```\n\n**限制：**\n\n`0 <= 节点个数 <= 10000`\n\n<!--more-->\n\n\n\n#### 题解\n\n##### 解题思路：\n\n由题意可知，若树*B*是树*A*的子结构，则子结构的根节点可能是树*A*的任意一个节点。因此需要判断树*B*是不是树*A*的子结构，只需要判断树*B*是否为树*A*的子节点，通过以下两步完成工作：\n\n1. 先序遍历树*A*中每个节点$n_A$;(对应函数`isSubStructure(A, B)`)\n2. 判断树 *A*中 **以 $n_A$为根节点的子树** 是否包含树 *B* 。（对应函数 `recur(A, B)`）\n\n<img src=\"搜索与回溯算法二/1.png\" alt=\"Picture1.png\" style=\"zoom: 50%;\" />\n\n\n\n##### 算法流程：\n\n**`recur(A, B)` 函数：**\n\n1. **终止条件：**\n   - 当节点 *B* 为空：说明树 *B* 已匹配完成（越过叶子节点），因此返回 `true` ；\n   - 当节点 *A* 为空：说明已经越过树 *A* 叶子节点，即匹配失败，返回 `false` ；\n   - 当节点 *A* 和 *B*  的值不同：说明匹配失败，返回 `false` ；\n2. **返回值：**\n   - 判断 *A* 和 *B*  的左子节点是否相等，即 `recur(A.left, B.left)` ；\n   - 判断 *A* 和 *B*  的右子节点是否相等，即 `recur(A.right, B.right)` ；\n\n**`isSubStructure(A, B)` 函数：**\n\n1. **特例处理：** 当 树 *A* 为空 或 树 *B*为空 时，直接返回 `false` ；\n2. **返回值：** 若树 *B*是树 *A*的子结构，则必满足以下三种情况之一，因此用或 `||` 连接；\n   - 以 节点 *A*为根节点的子树 包含树 *B*，对应 `recur(A, B)`；\n   - 树 *B*是 树 *A*左子树 的子结构，对应 `isSubStructure(A.left, B)`；\n   - 树 *B* 是 树 *A*右子树 的子结构，对应 `isSubStructure(A.right, B)`；\n\n\n\n```java\nclass Solution {\n    public boolean isSubStructure(TreeNode A, TreeNode B) {\n        return (A != null && B != null) && (recur(A, B) || isSubStructure(A.left, B) || isSubStructure(A.right, B));\n    }\n    boolean recur(TreeNode A, TreeNode B) {\n        if(B == null) \n            return true;\n        if(A == null || A.val != B.val) \n            return false;\n        return recur(A.left, B.left) && recur(A.right, B.right);\n    }\n}\n```\n\n-----\n\n\n\n### 例题二\n\n请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。\n\n例如，二叉树 `[1,2,2,3,4,4,3]` 是对称的。\n\n```java\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n```\n但是下面这个 `[1,2,2,null,3,null,3]` 则不是镜像对称的:\n\n```java\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n```\n**示例 1：**\n\n```java\n输入：root = [1,2,2,3,4,4,3]\n输出：true\n```\n\n**示例 2：**\n\n```java\n输入：root = [1,2,2,null,3,null,3]\n输出：false\n```\n\n**限制：**\n\n`0 <= 节点个数 <= 1000`\n\n\n\n#### 题解\n\n##### 解题思路：\n\n- **对称二叉树定义：** 对于树中 **任意两个对称节点**  *L* 和 *R* ，一定有：\n  - `L.val = R.val`：即此两对称节点值相等。\n  - `L.left.val = R.right.val`：即 *L*的 左子节点 和 *R*的 右子节点 对称；\n  - `L.right.val = R.left.val`：即 *L*的 右子节点 和 *R*的 左子节点 对称。\n- 根据以上规律，考虑从顶至底递归，判断每对节点是否对称，从而判断树是否为对称二叉树。\n\n<img src=\"搜索与回溯算法二/2.png\" alt=\"Picture1.png\" style=\"zoom:50%;\" />\n\n\n\n##### 算法流程：\n\n`isSymmetric(root)`：\n\n- **特例处理：** 若根节点 `root` 为空，则直接返回 `true` 。\n- **返回值：** 即 `recur(root.left, root.right)` ;\n\n`recur(L, R)`：\n\n- **终止条件：**\n  - 当 *L*和 *R*同时越过叶节点： 此树从顶至底的节点都对称，因此返回`true` ；\n  - 当 *L*或 *R*中只有一个越过叶节点： 此树不对称，因此返回`false` ；\n  - 当节点 *L*值 $\\ne$ 节点 *R*值： 此树不对称，因此返回 `false`；\n- **递推工作：**\n  - 判断两节点 `L.left` 和 `R.right` 是否对称，即 `recur(L.left, R.right)`；\n  - 判断两节点 `L.right` 和 `R.left` 是否对称，即 `recur(L.right, R.left)`；\n- **返回值：** 两对节点都对称时，才是对称树，因此用与逻辑符 `&&` 连接。\n\n```java\nclass Solution {\n    public boolean isSymmetric(TreeNode root) {\n        return root == null ? true : recur(root.left, root.right);\n    }\n    boolean recur(TreeNode L, TreeNode R) {\n        if(L == null && R == null) \n            return true;\n        if(L == null || R == null || L.val != R.val)\n            return false;\n        return recur(L.left, R.right) && recur(L.right, R.left);\n    }\n}\n```\n\n\n\n> 参考来源：力扣（LeetCode）\n>\n> 作者：jyd\n\n","tags":["算法","深度优先搜索","二叉树"],"categories":["LeetCode学习","搜索与回溯算法"]},{"title":"搜索与回溯算法","url":"/2022/05/15/搜索与回溯算法/","content":"\n### 例题一\n\n从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。\n\n \n\n**例如:**\n给定二叉树: `[3,9,20,null,null,15,7]`,\n\n```java\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n**返回：**\n\n```java\n[3,9,20,15,7]\n```\n\n**提示：**\n\n- 节点总数 <= 1000\n\n<!--more-->\n\n\n\n#### 题解\n\n##### 解题思路\n\n- 题目要求的二叉树的 **从上至下** 打印（即按层打印），又称为二叉树的 **广度优先搜索**（BFS）。\n- BFS 通常借助 **队列** 的先入先出特性来实现。\n\n<img src=\"搜索与回溯算法/1.png\" alt=\"Picture0.png\" style=\"zoom: 67%;\" />\n\n\n\n##### 算法流程\n\n1. **特例处理：**当根节点为空时，直接返回空列表[]；\n2. **初始化：**打印结果列表`list`，队列`queue[]`将`root`根节点放入队列；\n3. **BFS循环：**当队列为空时退出循环\n   - **出队：**队首元素出队，记为`T`；\n   - **打印：**将`T.val`添加至列表`list`尾部；\n   - **添加子节点：**若`T`的左(右)节点不为空，则将左(右)节点加入队列`queue`；\n4. **返回值：**将打印列表转为数组`res`，返回数组`res`即可。\n\n```java\nclass Solution {\n    public int[] levelOrder(TreeNode root) {\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        List<Integer> list = new LinkedList<Integer>();   \n        if(root == null)\n            return new int[0];\n        queue.add(root);\n        while(!queue.isEmpty()){\n            TreeNode T = queue.remove();\n            if(T.left != null){\n                queue.add(T.left);\n            }\n            if(T.right != null){\n                queue.add(T.right);\n            }\n            list.add(T.val);\n        }\n        int[] res = new int[list.size()];\n            for(int i = 0; i < list.size(); i++)\n                res[i] = list.get(i);\n            return res;\n    }\n}\n```\n\n-----\n\n\n\n### 例题二\n\n请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。\n\n \n\n**例如:**\n给定二叉树: `[3,9,20,null,null,15,7]`,\n\n```java\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回其层次遍历结果：\n\n```java\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n```\n\n\n提示：\n\n- 节点总数 <= 1000\n\n\n\n#### 题解\n\n##### 解题思路：层序遍历 + 双端队列\n\n- 利用双端队列的两端皆可添加元素的特性，设打印列表（双端队列)`tmp`，并规定：\n  - 奇数层 则添加至 `tmp` **尾部** ，\n  - 偶数层 则添加至 `tmp` **头部** 。\n\n<img src=\"搜索与回溯算法/2.png\" alt=\"Picture1.png\" style=\"zoom: 67%;\" />\n\n\n\n##### 算法流程：\n\n1. **特例处理：** 当树的根节点为空，则直接返回空列表 `[]` ；\n2. **初始化：** 打印结果空列表 `res` ，包含根节点的双端队列 `deque` ；\n3. **BFS 循环：** 当 `deque` 为空时跳出；\n   - 新建列表 `tmp` ，用于临时存储当前层打印结果；\n   - **当前层打印循环：** 循环次数为当前层节点数（即 `deque` 长度）；\n     - **出队：** 队首元素出队，记为 `node`；\n     - **打印：** 若为奇数层，将 `node.val` 添加至 `tmp` 尾部；否则，添加至 `tmp`头部；\n     - **添加子节点：** 若 `node` 的左（右）子节点不为空，则加入 `deque` ；\n   - 将当前层结果 `tmp` 转化为 `list` 并添加入 `res` ；\n4. **返回值：** 返回打印结果列表 `res` 即可；\n\n```java\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        Queue<TreeNode> queue = new LinkedList<>();\n        List<List<Integer>> res = new ArrayList<>();\n        if(root != null) \n            queue.add(root);\n        while(!queue.isEmpty()) {\n            LinkedList<Integer> tmp = new LinkedList<>();\n            for(int i = queue.size(); i > 0; i--) {\n                TreeNode node = queue.poll();\n                if(res.size() % 2 == 0)\n                    tmp.addLast(node.val); // 偶数层 -> 队列头部\n                else\n                    tmp.addFirst(node.val); // 奇数层 -> 队列尾部\n                if(node.left != null)\n                    queue.add(node.left);\n                if(node.right != null) \n                    queue.add(node.right);\n            }\n            res.add(tmp);\n        }\n        return res;\n    }\n}\n```\n\n-----\n\n\n\n> 参考来源：力扣（LeetCode）\n>\n> 作者：jyd\n\n","tags":["算法","二叉树","广度优先搜索"],"categories":["LeetCode学习","搜索与回溯算法"]},{"title":"查找算法","url":"/2022/05/14/查找算法/","content":"\n### 例题一\n\n在一个 ``n * m`` 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n \n\n**示例:**\n\n现有矩阵 ``matrix`` 如下：\n\n````java\n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n````\n\n\n给定 ``target = 5``，返回 ``true``。\n\n给定 ``target = 20``，返回 ``false``。\n\n \n\n**限制：**\n\n``0 <= n <= 1000``\n\n``0 <= m <= 1000``\n\n<!--more-->\n\n#### 题解\n\n##### 解题思路一：暴力\n\n如果不考虑二维数组排好序的特点，则直接遍历整个二维数组的每一个元素，判断目标值是否在二维数组中存在。\n\n依次遍历二维数组的每一行和每一列。如果找到一个元素等于目标值，则返回 true。如果遍历完毕仍未找到等于目标值的元素，则返回 false。**（不推荐）**\n\n```java\nclass Solution {\n    public boolean findNumberIn2DArray(int[][] matrix, int target) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return false;\n        }\n        int rows = matrix.length, columns = matrix[0].length;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < columns; j++) {\n                if (matrix[i][j] == target) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n```\n\n\n\n##### 解题思路二：二分查找\n\n由于给定的二维数组具备每行从左到右递增以及每列从上到下递增的特点，当访问到一个元素时，可以排除数组中的部分元素。\n\n从二维数组的右上角开始查找。如果当前元素等于目标值，则返回 `true`。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。\n\n可以证明这种方法不会错过目标值。如果当前元素大于目标值，说明当前元素的下边的所有元素都一定大于目标值，因此往下查找不可能找到目标值，往左查找可能找到目标值。如果当前元素小于目标值，说明当前元素的左边的所有元素都一定小于目标值，因此往左查找不可能找到目标值，往下查找可能找到目标值。\n\n- 若数组为空，返回 `false`\n\n- 初始化行下标为 `0`，列下标为二维数组的列数减` 1`\n  - 重复下列步骤，直到行下标或列下标超出边界\n  - 获得当前下标位置的元素 `num`\n  - 如果 `num` 和 `target `相等，返回 `true`\n  - 如果 `num` 大于 `target`，列下标减 `1`\n  - 如果 `num` 小于 `target`，行下标加 `1`\n- 循环体执行完毕仍未找到元素等于 `target` ，说明不存在这样的元素，返回 `false`。\n\n```java\nclass Solution {\n    public boolean findNumberIn2DArray(int[][] matrix, int target) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return false;\n        }\n        int long1 = matrix[0].length;\n        int high1 = matrix.length;\n        int long2 = long1 - 1;\n        int high2 = 0;\n        while(high2 < high1 && long2 >= 0){\n            if(matrix[high2][long2] == target){\n                return true;\n            }else if(matrix[high2][long2] < target){\n                high2++;\n            }else{\n                long2--;\n            }\n        }\n        return false;\n    }\n}\n```\n\n-----\n\n\n\n### 例题二\n\n把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。\n\n给你一个可能存在 重复 元素值的数组 `numbers` ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的最小元素。例如，数组 `[3,4,5,1,2]` 为 `[1,2,3,4,5]` 的一次旋转，该数组的最小值为 `1`。  \n\n注意，数组 `[a[0], a[1], a[2], ..., a[n-1]]` 旋转一次 的结果为数组 `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`。\n\n \n\n**示例 1：**\n\n```java\n输入：numbers = [3,4,5,1,2]\n输出：1\n```\n\n**示例 2：**\n\n```java\n输入：numbers = [2,2,2,0,1]\n输出：0\n```\n\n\n\n**提示：**\n\n- `n == numbers.length`\n- `1 <= n <= 5000`\n- `-5000 <= numbers[i] <= 5000`\n- `numbers` 原来是一个升序排序的数组，并进行了 `1` 至 `n` 次旋转\n\n#### 题解\n\n##### 解题思路：二分查找\n\n一个包含重复元素的升序数组在经过旋转之后，可以得到下面可视化的折线图：\n\n<img src=\"查找算法/1.png\" alt=\"fig1\"  />\n\n其中横轴表示数组元素的下标，纵轴表示数组元素的值。图中标出了最小值的位置，是我们需要查找的目标。\n\n我们考虑数组中的最后一个元素 `x`：在最小值右侧的元素，它们的值一定都小于等于 `x`；而在最小值左侧的元素，它们的值一定都大于等于 `x`。因此，我们可以根据这一条性质，通过二分查找的方法找出最小值。\n\n在二分查找的每一步中，左边界为 `low`，右边界为 `high`，区间的中点为 `pivot`，最小值就在该区间内。我们将中轴元素 `numbers[pivot]` 与右边界元素 `numbers[high]` 进行比较，可能会有以下的三种情况：\n\n第一种情况是 `numbers[pivot]<numbers[high]`。如下图所示，这说明 `numbers[pivot]` 是最小值右侧的元素，因此我们可以忽略二分查找区间的右半部分。\n\n<img src=\"查找算法/2.png\" alt=\"fig2\"  />\n\n第二种情况是`numbers[pivot]>numbers[high]`。如下图所示，这说明 `numbers[pivot]`是最小值左侧的元素，因此我们可以忽略二分查找区间的左半部分。\n\n![fig3](查找算法/3.png)\n\n第三种情况是 `numbers[pivot]==numbers[high]`。如下图所示，由于重复元素的存在，我们并不能确定`numbers[pivot]` 究竟在最小值的左侧还是右侧，因此我们不能莽撞地忽略某一部分的元素。我们唯一可以知道的是，由于它们的值相同，所以无论 `numbers[high]` 是不是最小值，都有一个它的「替代品」`numbers[pivot]`，因此我们可以忽略二分查找区间的右端点。\n\n![fig4](查找算法/4.png)\n\n当二分查找结束时，我们就得到了最小值所在的位置。\n\n```java\nclass Solution {\n    public int minArray(int[] numbers) {\n        int start = 0;\n        int end = numbers.length - 1;\n        while(start < end){\n            int mid = start + (end - start) / 2;\n            if(numbers[mid] > numbers[end]){\n                start = mid + 1;\n            }else if(numbers[mid] < numbers[end]){\n                end = mid;\n            }else{\n                end--;\n            }\n        }\n        return numbers[start];\n    }\n}\n```\n\n----\n\n\n\n> 参考来源：力扣（LeetCode）\n>\n> 作者：LeetCode-Solution\n\n","tags":["算法","数组","二分查找"],"categories":["LeetCode学习","查找算法"]},{"title":"链表","url":"/2022/05/09/链表/","content":"\n### 例题一\n\n定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。\n\n**示例**\n\n```java\n输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n```\n\n**限制：**\n\n```java\n0 <= 节点个数 <= 5000\n```\n\n<!--more-->\n\n#### 题解\n\n##### 解题思路一：迭代\n\n假设链表为 `1→2→3→∅`，我们想要把它改成`∅←1←2←3`。\n\n在遍历链表时，将当前节点的`next`指针改为指向前一个节点。由于该节点没有引用其前一个节点，因此需要事先准备一个空节点储存前一个节点，在更改引用之前还需要存储后一个节点。最后返回新的头节点。\n\n```java\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode p = null;      //用来储存倒叙\n        ListNode c = head;      \n        ListNode n = null;      \n        while(c != null){\n            n = c.next;\n            c.next = p;\n            p = c;\n            c = n;\n        }\n        return p;\n    }\n}\n```\n\n##### 解题思路二：递归\n\n- 使用递归函数，一直递归到链表的最后一个结点，该结点就是反转后的头结点，记作 `newHead` .\n- 此后，每次函数在返回的过程中，让当前结点的下一个结点的 `next`指针指向当前节点。\n- 同时让当前结点的 `next` 指针指向 `null` ，从而实现从链表尾部开始的局部反转\n- 当递归函数全部出栈后，链表反转完成。\n\n```java\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode newHead = reverseList(head.next);\n        head.next.next = head;\n        head.next = null;\n        return newHead;\n    }\n}\n```\n\n**递归较难理解，用笔演算一遍会好一点。**\n\n-----\n\n\n\n### 例题二\n\n请实现 `copyRandomList` 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 `next` 指针指向下一个节点，还有一个 `random` 指针指向链表中的任意节点或者 `null`。\n\n**示例1**\n\n![img](链表/e1.png)\n\n```java\n输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]\n\n```\n\n**示例2**\n\n<img src=\"链表/e2.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n```java\n输入：head = [[1,1],[2,1]]\n输出：[[1,1],[2,1]]\n```\n\n**示例3**\n\n<img src=\"链表/e3.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n```java\n输入：head = [[3,null],[3,0],[3,null]]\n输出：[[3,null],[3,0],[3,null]]\n```\n\n**示例 4：**\n\n```java\n输入：head = []\n输出：[]\n解释：给定的链表为空（空指针），因此返回 null。\n```\n\n **提示：**\n\n- `-10000 <= Node.val <= 10000`\n- `Node.random` 为空（null）或指向链表中的节点。\n- 节点数目不超过 1000 。\n\n#### 解题思路\n\n**回溯+哈希表**\n\n如果是普通链表，我们可以直接按照遍历的顺序创建链表节点。而本题中因为随机指针的存在，当我们拷贝节点时，「当前节点的随机指针指向的节点」可能还没创建，因此我们需要变换思路。一个可行方案是，我们利用回溯的方式，让每个节点的拷贝操作相互独立。对于当前节点，我们首先要进行拷贝，然后我们进行「当前节点的后继节点」和「当前节点的随机指针指向的节点」拷贝，拷贝完成后将创建的新节点的指针返回，即可完成当前节点的两指针的赋值。\n\n具体地，我们用哈希表记录每一个节点对应新节点的创建情况。遍历该链表的过程中，我们检查「当前节点的后继节点」和「当前节点的随机指针指向的节点」的创建情况。如果这两个节点中的任何一个节点的新节点没有被创建，我们都立刻递归地进行创建。当我们拷贝完成，回溯到当前层时，我们即可完成当前节点的指针赋值。注意一个节点可能被多个其他节点指向，因此我们可能递归地多次尝试拷贝某个节点，为了防止重复拷贝，我们需要首先检查当前节点是否被拷贝过，如果已经拷贝过，我们可以直接从哈希表中取出拷贝后的节点的指针并返回即可。\n\n在实际代码中，我们需要特别判断给定节点为空节点的情况。\n\n```java\nclass Solution {\n    Map<Node, Node> cachedNode = new HashMap<Node, Node>();\n\n    public Node copyRandomList(Node head) {\n        if (head == null) {\n            return null;\n        }\n        if (!cachedNode.containsKey(head)) {\n            Node headNew = new Node(head.val);\n            cachedNode.put(head, headNew);\n            headNew.next = copyRandomList(head.next);\n            headNew.random = copyRandomList(head.random);\n        }\n        return cachedNode.get(head);\n    }\n}\n```\n\n-----\n\n\n\n> 参考来源：力扣（LeetCode）\n>\n> 作者：jyd\n\n","tags":["算法","链表","哈希表"],"categories":["LeetCode学习","链表"]},{"title":"栈与队列","url":"/2022/05/04/栈与队列/","content":"\n### 例题一\n\n用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )\n\n**示例 1：**\n\n```java\n输入：\n[\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\"]\n[[],[3],[],[]]\n输出：\n[null,null,3,-1]\n```\n\n<!--more-->\n\n**示例 2：**\n\n```java\n输入：\n[\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"]\n[[],[],[5],[2],[],[]]\n输出：\n[null,-1,null,null,5,2]\n```\n\n**提示：**\n\n- `1 <= values <= 10000`\n- `最多会对 appendTail、deleteHead 进行 10000 次调用`\n\n#### 题解\n\n##### 解题思路\n\n- **栈无法实现队列功能:**\t栈为先进后出，队列为先进先出\n- **双栈可实现列表倒叙:**    用栈B元素实现对栈A的倒叙\n- **利用栈B删除队首元素**    B出栈相当于删除栈A的栈底元素，及队列首元素\n\n##### 函数设计\n\n- **加入队首`appendTail()`函数：**将数字val加入栈`A`即可。\n- **删除队尾`deleteHead()`:**分几种情况。\n  1. **当栈B不为空：**B中仍有已完成倒叙的元素，因此只需要返回B中的栈顶元素即可。\n  2. **否则，当A为空时：**当两个栈都为空时，无元素，返回-1。\n  3. **否则：**将栈A所有元素转移到栈B中，实现元素倒叙，并返回栈B元素的栈顶元素。\n\n##### 代码\n\n```java\nclass CQueue {\n    Stack<Integer> in,out;\n    public CQueue() {\n        in = new Stack<>();\n        out = new Stack<>();\n    }\n    \n    public void appendTail(int value) {\n        in.push(value);\n    }\n    \n    public int deleteHead() {\n        //当out栈不为空时，返回栈顶元素\n        if(!out.isEmpty()){\n            return out.pop();\n        }\n        //当in栈为空时，返回-1\n        if(in.isEmpty()){\n            return -1;\n        }\n        //当out栈为空时，将in栈中元素转到out栈中\n        while(!in.isEmpty()){\n            out.push(in.pop());\n        }\n        return out.pop();\n    }\n}\n```\n\n-----\n\n\n\n### 例题二\n\n定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。\n\n \n\n**示例:**\n\n```java\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.min();   --> 返回 -3.\nminStack.pop();\nminStack.top();      --> 返回 0.\nminStack.min();   --> 返回 -2.\n```\n\n**提示：**\n\n各函数的调用总次数不超过 20000 次\n\n\n\n#### 题解\n\n##### 解题思路\n\n对于栈来说，如果一个元素 `a` 在入栈时，栈里有其它的元素 `b, c, d`，那么无论这个栈在之后经历了什么操作，只要 `a` 在栈中，`b, c, d` 就一定在栈中，因为在 `a` 被弹出之前，b, c, d 不会被弹出。\n\n因此，在操作过程中的任意一个时刻，只要栈顶的元素是 a，那么我们就可以确定栈里面现在的元素一定是 `a, b, c, d`。\n\n那么，我们可以在每个元素 `a` 入栈时把当前栈的最小值 m 存储起来。在这之后无论何时，如果栈顶元素是 `a`，我们就可以直接返回存储的最小值 `m`。\n\n##### 算法\n\n按照上面的思路，我们只需要设计一个数据结构，使得每个元素`a`与其相应的最小值 `m` 时刻保持一一对应。因此我们可以使用一个辅助栈，与元素栈同步插入与删除，用于存储与每个元素对应的最小值。\n\n- 当一个元素要入栈时，我们取当前辅助栈的栈顶存储的最小值，与当前元素比较得出最小值，将这个最小值插入辅助栈中；\n\n\n- 当一个元素要出栈时，我们把辅助栈的栈顶元素也一并弹出；\n- 在任意一个时刻，栈内元素的最小值就存储在辅助栈的栈顶元素中。\n\n##### 代码\n\n```java\nclass MinStack {\n    /** initialize your data structure here. */\n\n    Stack<Integer> A,B;\n    public MinStack() {\n        A = new Stack<>();\n        B = new Stack<>();\n    }\n    \n    public void push(int x) {\n        A.push(x);\n        if(B.empty() || B.peek() >= x){\n            B.push(x);\n        }\n    }\n    \n    public void pop() {\n        if(A.pop().equals(B.peek())){\n            B.pop();\n        }\n    }\n    \n    public int top() {\n        return A.peek();\n    }\n    \n    public int min() {\n        return B.peek();\n    }\n}\n\n```\n\n----\n\n\n\n> 参考来源：力扣（LeetCode）\n>\n> 作者：LeetCode-Solution\n\n","tags":["算法","栈与队列"],"categories":["LeetCode学习","栈"]},{"title":"Hello World","url":"/2022/05/02/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n   <!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]