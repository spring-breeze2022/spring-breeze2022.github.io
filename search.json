[{"title":"Hello World","url":"/2022/05/02/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n   <span id=\"more\"></span>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"栈与队列","url":"/2022/05/04/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/","content":"<h3 id=\"例题一\"><a href=\"#例题一\" class=\"headerlink\" title=\"例题一\"></a>例题一</h3><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\">[<span class=\"string\">&quot;CQueue&quot;</span>,<span class=\"string\">&quot;appendTail&quot;</span>,<span class=\"string\">&quot;deleteHead&quot;</span>,<span class=\"string\">&quot;deleteHead&quot;</span>]</span><br><span class=\"line\">[[],[<span class=\"number\">3</span>],[],[]]</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"number\">3</span>,-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\">[<span class=\"string\">&quot;CQueue&quot;</span>,<span class=\"string\">&quot;deleteHead&quot;</span>,<span class=\"string\">&quot;appendTail&quot;</span>,<span class=\"string\">&quot;appendTail&quot;</span>,<span class=\"string\">&quot;deleteHead&quot;</span>,<span class=\"string\">&quot;deleteHead&quot;</span>]</span><br><span class=\"line\">[[],[],[<span class=\"number\">5</span>],[<span class=\"number\">2</span>],[],[]]</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"literal\">null</span>,-<span class=\"number\">1</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= values &lt;= 10000</code></li>\n<li><code>最多会对 appendTail、deleteHead 进行 10000 次调用</code></li>\n</ul>\n<h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><ul>\n<li><strong>栈无法实现队列功能:</strong>\t栈为先进后出，队列为先进先出</li>\n<li><strong>双栈可实现列表倒叙:</strong>    用栈B元素实现对栈A的倒叙</li>\n<li><strong>利用栈B删除队首元素</strong>    B出栈相当于删除栈A的栈底元素，及队列首元素</li>\n</ul>\n<h5 id=\"函数设计\"><a href=\"#函数设计\" class=\"headerlink\" title=\"函数设计\"></a>函数设计</h5><ul>\n<li><strong>加入队首<code>appendTail()</code>函数：</strong>将数字val加入栈<code>A</code>即可。</li>\n<li>**删除队尾<code>deleteHead()</code>:**分几种情况。<ol>\n<li><strong>当栈B不为空：</strong>B中仍有已完成倒叙的元素，因此只需要返回B中的栈顶元素即可。</li>\n<li><strong>否则，当A为空时：</strong>当两个栈都为空时，无元素，返回-1。</li>\n<li><strong>否则：</strong>将栈A所有元素转移到栈B中，实现元素倒叙，并返回栈B元素的栈顶元素。</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CQueue</span> &#123;</span><br><span class=\"line\">    Stack&lt;Integer&gt; in,out;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CQueue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        in = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        out = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">appendTail</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        in.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">deleteHead</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//当out栈不为空时，返回栈顶元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!out.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> out.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当in栈为空时，返回-1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(in.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当out栈为空时，将in栈中元素转到out栈中</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!in.isEmpty())&#123;</span><br><span class=\"line\">            out.push(in.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> out.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"例题二\"><a href=\"#例题二\" class=\"headerlink\" title=\"例题二\"></a>例题二</h3><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">MinStack</span> <span class=\"variable\">minStack</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MinStack</span>();</span><br><span class=\"line\">minStack.push(-<span class=\"number\">2</span>);</span><br><span class=\"line\">minStack.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">minStack.push(-<span class=\"number\">3</span>);</span><br><span class=\"line\">minStack.min();   --&gt; 返回 -<span class=\"number\">3.</span></span><br><span class=\"line\">minStack.pop();</span><br><span class=\"line\">minStack.top();      --&gt; 返回 <span class=\"number\">0.</span></span><br><span class=\"line\">minStack.min();   --&gt; 返回 -<span class=\"number\">2.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<p>各函数的调用总次数不超过 20000 次</p>\n<h4 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>对于栈来说，如果一个元素 <code>a</code> 在入栈时，栈里有其它的元素 <code>b, c, d</code>，那么无论这个栈在之后经历了什么操作，只要 <code>a</code> 在栈中，<code>b, c, d</code> 就一定在栈中，因为在 <code>a</code> 被弹出之前，b, c, d 不会被弹出。</p>\n<p>因此，在操作过程中的任意一个时刻，只要栈顶的元素是 a，那么我们就可以确定栈里面现在的元素一定是 <code>a, b, c, d</code>。</p>\n<p>那么，我们可以在每个元素 <code>a</code> 入栈时把当前栈的最小值 m 存储起来。在这之后无论何时，如果栈顶元素是 <code>a</code>，我们就可以直接返回存储的最小值 <code>m</code>。</p>\n<h5 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h5><p>按照上面的思路，我们只需要设计一个数据结构，使得每个元素<code>a</code>与其相应的最小值 <code>m</code> 时刻保持一一对应。因此我们可以使用一个辅助栈，与元素栈同步插入与删除，用于存储与每个元素对应的最小值。</p>\n<ul>\n<li><p>当一个元素要入栈时，我们取当前辅助栈的栈顶存储的最小值，与当前元素比较得出最小值，将这个最小值插入辅助栈中；</p>\n</li>\n<li><p>当一个元素要出栈时，我们把辅助栈的栈顶元素也一并弹出；</p>\n</li>\n<li><p>在任意一个时刻，栈内元素的最小值就存储在辅助栈的栈顶元素中。</p>\n</li>\n</ul>\n<h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinStack</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** initialize your data structure here. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Stack&lt;Integer&gt; A,B;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MinStack</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        A = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        B = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        A.push(x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(B.empty() || B.peek() &gt;= x)&#123;</span><br><span class=\"line\">            B.push(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A.pop().equals(B.peek()))&#123;</span><br><span class=\"line\">            B.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">top</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> A.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">min</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> B.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode学习","栈"],"tags":["算法","栈与队列"]},{"title":"链表","url":"/2022/05/09/%E9%93%BE%E8%A1%A8/","content":"<h3 id=\"例题一\"><a href=\"#例题一\" class=\"headerlink\" title=\"例题一\"></a>例题一</h3><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>-&gt;NULL</span><br><span class=\"line\">输出: <span class=\"number\">5</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">1</span>-&gt;NULL</span><br></pre></td></tr></table></figure>\n\n<p><strong>限制：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> &lt;= 节点个数 &lt;= <span class=\"number\">5000</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路一：迭代\"><a href=\"#解题思路一：迭代\" class=\"headerlink\" title=\"解题思路一：迭代\"></a>解题思路一：迭代</h5><p>假设链表为 <code>1→2→3→∅</code>，我们想要把它改成<code>∅←1←2←3</code>。</p>\n<p>在遍历链表时，将当前节点的<code>next</code>指针改为指向前一个节点。由于该节点没有引用其前一个节点，因此需要事先准备一个空节点储存前一个节点，在更改引用之前还需要存储后一个节点。最后返回新的头节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">reverseList</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;      <span class=\"comment\">//用来储存倒叙</span></span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> head;      </span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;      </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(c != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            n = c.next;</span><br><span class=\"line\">            c.next = p;</span><br><span class=\"line\">            p = c;</span><br><span class=\"line\">            c = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路二：递归\"><a href=\"#解题思路二：递归\" class=\"headerlink\" title=\"解题思路二：递归\"></a>解题思路二：递归</h5><ul>\n<li>使用递归函数，一直递归到链表的最后一个结点，该结点就是反转后的头结点，记作 <code>newHead</code> .</li>\n<li>此后，每次函数在返回的过程中，让当前结点的下一个结点的 <code>next</code>指针指向当前节点。</li>\n<li>同时让当前结点的 <code>next</code> 指针指向 <code>null</code> ，从而实现从链表尾部开始的局部反转</li>\n<li>当递归函数全部出栈后，链表反转完成。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">reverseList</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span> || head.next == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">newHead</span> <span class=\"operator\">=</span> reverseList(head.next);</span><br><span class=\"line\">        head.next.next = head;</span><br><span class=\"line\">        head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>递归较难理解，用笔演算一遍会好一点。</strong></p>\n<hr>\n<h3 id=\"例题二\"><a href=\"#例题二\" class=\"headerlink\" title=\"例题二\"></a>例题二</h3><p>请实现 <code>copyRandomList</code> 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 <code>next</code> 指针指向下一个节点，还有一个 <code>random</code> 指针指向链表中的任意节点或者 <code>null</code>。</p>\n<p><strong>示例1</strong></p>\n<p><img src=\"/2022/05/09/%E9%93%BE%E8%A1%A8/e1.png\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：head = [[<span class=\"number\">7</span>,<span class=\"literal\">null</span>],[<span class=\"number\">13</span>,<span class=\"number\">0</span>],[<span class=\"number\">11</span>,<span class=\"number\">4</span>],[<span class=\"number\">10</span>,<span class=\"number\">2</span>],[<span class=\"number\">1</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\">输出：[[<span class=\"number\">7</span>,<span class=\"literal\">null</span>],[<span class=\"number\">13</span>,<span class=\"number\">0</span>],[<span class=\"number\">11</span>,<span class=\"number\">4</span>],[<span class=\"number\">10</span>,<span class=\"number\">2</span>],[<span class=\"number\">1</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例2</strong></p>\n<p><img src=\"/2022/05/09/%E9%93%BE%E8%A1%A8/e2.png\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：head = [[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">1</span>]]</span><br><span class=\"line\">输出：[[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">1</span>]]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例3</strong></p>\n<p><img src=\"/2022/05/09/%E9%93%BE%E8%A1%A8/e3.png\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：head = [[<span class=\"number\">3</span>,<span class=\"literal\">null</span>],[<span class=\"number\">3</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"literal\">null</span>]]</span><br><span class=\"line\">输出：[[<span class=\"number\">3</span>,<span class=\"literal\">null</span>],[<span class=\"number\">3</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"literal\">null</span>]]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 4：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：head = []</span><br><span class=\"line\">输出：[]</span><br><span class=\"line\">解释：给定的链表为空（空指针），因此返回 <span class=\"literal\">null</span>。</span><br></pre></td></tr></table></figure>\n\n<p> <strong>提示：</strong></p>\n<ul>\n<li><code>-10000 &lt;= Node.val &lt;= 10000</code></li>\n<li><code>Node.random</code> 为空（null）或指向链表中的节点。</li>\n<li>节点数目不超过 1000 。</li>\n</ul>\n<h4 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p><strong>回溯+哈希表</strong></p>\n<p>如果是普通链表，我们可以直接按照遍历的顺序创建链表节点。而本题中因为随机指针的存在，当我们拷贝节点时，「当前节点的随机指针指向的节点」可能还没创建，因此我们需要变换思路。一个可行方案是，我们利用回溯的方式，让每个节点的拷贝操作相互独立。对于当前节点，我们首先要进行拷贝，然后我们进行「当前节点的后继节点」和「当前节点的随机指针指向的节点」拷贝，拷贝完成后将创建的新节点的指针返回，即可完成当前节点的两指针的赋值。</p>\n<p>具体地，我们用哈希表记录每一个节点对应新节点的创建情况。遍历该链表的过程中，我们检查「当前节点的后继节点」和「当前节点的随机指针指向的节点」的创建情况。如果这两个节点中的任何一个节点的新节点没有被创建，我们都立刻递归地进行创建。当我们拷贝完成，回溯到当前层时，我们即可完成当前节点的指针赋值。注意一个节点可能被多个其他节点指向，因此我们可能递归地多次尝试拷贝某个节点，为了防止重复拷贝，我们需要首先检查当前节点是否被拷贝过，如果已经拷贝过，我们可以直接从哈希表中取出拷贝后的节点的指针并返回即可。</p>\n<p>在实际代码中，我们需要特别判断给定节点为空节点的情况。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    Map&lt;Node, Node&gt; cachedNode = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Node, Node&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node <span class=\"title function_\">copyRandomList</span><span class=\"params\">(Node head)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cachedNode.containsKey(head)) &#123;</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">headNew</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(head.val);</span><br><span class=\"line\">            cachedNode.put(head, headNew);</span><br><span class=\"line\">            headNew.next = copyRandomList(head.next);</span><br><span class=\"line\">            headNew.random = copyRandomList(head.random);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cachedNode.get(head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","categories":["LeetCode学习","链表"],"tags":["算法","链表","哈希表"]}]