[{"title":"Hello World","url":"/2022/05/02/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n   <span id=\"more\"></span>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"动态规划","url":"/2022/05/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","content":"<h3 id=\"例题一\"><a href=\"#例题一\" class=\"headerlink\" title=\"例题一\"></a>例题一</h3><p>写一个函数，输入<code>n</code>，求斐波那契（Fibonacci）数列的第 <code>n</code> 项（即 <code>F(N)</code>）。斐波那契数列的定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">F(<span class=\"number\">0</span>) = <span class=\"number\">0</span>,   F(<span class=\"number\">1</span>) = <span class=\"number\">1</span></span><br><span class=\"line\">F(N) = F(N - <span class=\"number\">1</span>) + F(N - <span class=\"number\">2</span>), 其中 N &gt; <span class=\"number\">1.</span></span><br></pre></td></tr></table></figure>\n\n\n<p>斐波那契数列由 <code>0</code> 和 <code>1</code> 开始，之后的斐波那契数就是由之前的两数相加而得出。</p>\n<p>答案需要取模 <code>1e9+7(1000000007)</code>，如计算初始结果为：<code>1000000008</code>，请返回 <code>1</code>。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：n = <span class=\"number\">2</span></span><br><span class=\"line\">输出：<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：n = <span class=\"number\">5</span></span><br><span class=\"line\">输出：<span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>0 &lt;= n &lt;= 100</code></li>\n</ul>\n<span id=\"more\"></span>\n\n<h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>斐波那契数列的定义是 <em>f</em>(<em>n</em>+1)&#x3D;<em>f</em>(<em>n</em>)+<em>f</em>(<em>n</em>−1) ，生成第 <em>n</em> 项的做法有以下几种：</p>\n<ol>\n<li><strong>递归法：</strong><ul>\n<li>把<em>f</em>(<em>n</em>+1)拆分为<em>f</em>(<em>n</em>)和<em>f</em>(<em>n</em>−1)两个式子计算，递归计算，直到<em>f</em>(0)和<em>f</em>(1)为终止条件。</li>\n<li><strong>缺点：</strong> 需要进行大量递归计算，时间复杂度为$O(2^n)$;</li>\n</ul>\n</li>\n<li><strong>动态规划：</strong><ul>\n<li><strong>原理：</strong> 以斐波那契数列性质 f*(<em>n</em>+1)&#x3D;<em>f</em>(<em>n</em>)+<em>f</em>(<em>n</em>−1) 为转移方程。</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h5><p><strong>动态规划解析：</strong></p>\n<ul>\n<li><p><strong>状态定义：</strong> 设 <em>dp</em> 为一维数组，其中 <em>dp[i]</em> 的值代表 斐波那契数列第 <em>i</em> 个数字 。</p>\n</li>\n<li><p><strong>转移方程：</strong> <em>dp[i+1]&#x3D;dp[i]+dp[i−1]</em> ，即对应数列定义 <em>f(n+1)&#x3D;f(n)+f(n−1)</em> ；</p>\n</li>\n<li><p><strong>初始状态：</strong> <em>dp[0]&#x3D;0</em>,<em>dp[1]&#x3D;1</em> ，即初始化前两个数字；</p>\n</li>\n<li><p><strong>返回值：</strong> <em>dp[n]</em> ，即斐波那契数列的第 <em>n</em> 个数字。</p>\n<p><strong>需要对结果循环求余：</strong>防止因<em>n</em>的增大，*f(n)*会超过<code>Int32</code>甚至<code>Int64</code>的取值范围，导致结果错误。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">fib</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, b = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> (a + b)%<span class=\"number\">1000000007</span>;</span><br><span class=\"line\">            a = b;</span><br><span class=\"line\">            b = sum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"例题二\"><a href=\"#例题二\" class=\"headerlink\" title=\"例题二\"></a>例题二</h3><p>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">输出: <span class=\"number\">5</span></span><br><span class=\"line\">解释: 在第 <span class=\"number\">2</span> 天（股票价格 = <span class=\"number\">1</span>）的时候买入，在第 <span class=\"number\">5</span> 天（股票价格 = <span class=\"number\">6</span>）的时候卖出，最大利润 = <span class=\"number\">6</span>-<span class=\"number\">1</span> = <span class=\"number\">5</span> 。</span><br><span class=\"line\">     注意利润不能是 <span class=\"number\">7</span>-<span class=\"number\">1</span> = <span class=\"number\">6</span>, 因为卖出价格需要大于买入价格。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">7</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出: <span class=\"number\">0</span></span><br><span class=\"line\">解释: 在这种情况下, 没有交易完成, 所以最大利润为 <span class=\"number\">0</span>。</span><br></pre></td></tr></table></figure>\n\n<p><strong>限制：</strong></p>\n<p><code>0 &lt;= 数组长度 &lt;= 10^5</code></p>\n<h4 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>在题目中，我们只要用一个变量记录一个历史最低价格 <code>minprice</code>，我们就可以假设自己的股票是在那天买的。那么我们在第 i 天卖出股票能得到的利润就是 <code>prices[i] - minprice</code>。</p>\n<p>因此，我们只需要遍历价格数组一遍，记录历史最低点，然后在每一天考虑这么一个问题：如果我是在历史最低点买进的，那么我今天卖出能赚多少钱？当考虑完所有天数之时，我们就得到了最好的答案。</p>\n<h5 id=\"算法步骤\"><a href=\"#算法步骤\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h5><ul>\n<li><strong>初始化：</strong>定义最低价为一个最大整型数<code>minprice = Integer.MAX_VALUE</code>,定义盈利<code>maxprofit = 0</code>;</li>\n<li><strong>遍历：</strong>求出当前时间段的最低价与最大盈利；</li>\n<li><strong>返回值：</strong>返回最大盈利值。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span> prices[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">minprice</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">maxprofit</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prices[i] &lt; minprice) &#123;</span><br><span class=\"line\">                minprice = prices[i];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (prices[i] - minprice &gt; maxprofit) &#123;</span><br><span class=\"line\">                maxprofit = prices[i] - minprice;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxprofit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"例题三\"><a href=\"#例题三\" class=\"headerlink\" title=\"例题三\"></a>例题三</h3><p>在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: </span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\">  [<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">输出: <span class=\"number\">12</span></span><br><span class=\"line\">解释: 路径 <span class=\"number\">1</span>→<span class=\"number\">3</span>→<span class=\"number\">5</span>→<span class=\"number\">2</span>→<span class=\"number\">1</span> 可以拿到最多价值的礼物</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>0 &lt; grid.length &lt;= 200</code></li>\n<li><code>0 &lt; grid[0].length &lt;= 200</code></li>\n</ul>\n<h4 id=\"题解-2\"><a href=\"#题解-2\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>题目说明：从棋盘的左上角开始拿格子里的礼物，并每次 <strong>向右</strong> 或者 <strong>向下</strong> 移动一格、直到到达棋盘的右下角。<br>根据题目说明，易得某单元格只可能从上边单元格或左边单元格到达。</p>\n<p>设 $f(i,j)$ 为从棋盘左上角走至单元格 (i ,j)(i,j) 的礼物最大累计价值，易得到以下递推关系：$f(i,j)$ 等于 $f(i,j-1)$ 和 $f(i-1,j)$ 中的较大值加上当前单元格礼物价值 $grid(i,j)$ 。</p>\n<p>​        $f(i,j) &#x3D; \\max[f(i,j-1), f(i-1,j)] + grid(i,j)$</p>\n<p>因此，可用动态规划解决此问题，以上公式便为转移方程。</p>\n<img src=\"/2022/05/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1.png\" alt=\"Picture1.png\" style=\"zoom: 67%;\">\n\n\n\n<h5 id=\"算法步骤-1\"><a href=\"#算法步骤-1\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h5><ul>\n<li><p><strong>状态定义：</strong> 设动态规划矩阵 dpdp ，dp(i,j)dp(i,j) 代表从棋盘的左上角开始，到达单元格 (i,j)(i,j) 时能拿到礼物的最大累计价值。</p>\n</li>\n<li><p><strong>转移方程：</strong></p>\n<ul>\n<li><p>当 $i &#x3D; 0$ 且 $j &#x3D; 0$ 时，为起始元素；</p>\n</li>\n<li><p>当 $i &#x3D; 0$ 且 $j \\ne 0$ 时，为矩阵第一行元素，只可从左边到达；</p>\n</li>\n<li><p>当 $i \\ne 0$ 且 $j &#x3D; 0$ 时，为矩阵第一列元素，只可从上边到达；</p>\n</li>\n<li><p>当 $i \\ne 0$ 且 $j \\ne 0$ 时，可从左边或上边到达；<br>$$<br>dp(i,j)&#x3D; \\begin{cases} grid(i,j) &amp; {,i&#x3D;0, j&#x3D;0}\\ grid(i,j) + dp(i,j-1) &amp; {,i&#x3D;0, j \\ne 0}\\ grid(i,j) + dp(i-1,j) &amp; {,i \\ne 0, j&#x3D;0}\\ grid(i,j) + \\max[dp(i-1,j),dp(i,j-1)]&amp; ,{i \\ne 0, j \\ne 0} \\end{cases}<br>$$</p>\n</li>\n</ul>\n</li>\n<li><p><strong>初始状态：</strong> $dp[0][0] &#x3D; grid[0][0]$，即到达单元格 $(0,0)$ 时能拿到礼物的最大累计价值为 $grid[0][0]$ ；</p>\n</li>\n<li><p><strong>返回值：</strong> $dp[m-1][n-1]$，$m, n$ 分别为矩阵的行高和列宽，即返回 $dp$ 矩阵右下角元素。</p>\n</li>\n</ul>\n<p><strong>可直接在原矩阵中进行修改，省去$dp$矩阵使用的额外空间，空间复杂度从$O(MN)$降低位$O(1)$</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxValue</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> grid.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i&lt; m;i++)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;j &lt; n;j++)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span> &amp;&amp; j == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    grid[i][j] += grid[i][j - <span class=\"number\">1</span>] ;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    grid[i][j] += grid[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    grid[i][j] += Math.max(grid[i][j - <span class=\"number\">1</span>], grid[i - <span class=\"number\">1</span>][j]);</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> grid[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>参考来源：力扣（LeetCode）</p>\n<p>作者：jyd、LeetCode-Solution</p>\n</blockquote>\n","categories":["LeetCode学习","动态规划"],"tags":["算法","数组","动态规划"]},{"title":"动态规划二","url":"/2022/05/20/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%BA%8C/","content":"<h3 id=\"例题一\"><a href=\"#例题一\" class=\"headerlink\" title=\"例题一\"></a>例题一</h3><p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"number\">12258</span></span><br><span class=\"line\">输出: <span class=\"number\">5</span></span><br><span class=\"line\">解释: <span class=\"number\">12258</span>有<span class=\"number\">5</span>种不同的翻译，分别是<span class=\"string\">&quot;bccfi&quot;</span>, <span class=\"string\">&quot;bwfi&quot;</span>, <span class=\"string\">&quot;bczi&quot;</span>, <span class=\"string\">&quot;mcfi&quot;</span>和<span class=\"string\">&quot;mzi&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>提示：</strong></p>\n<p><code>0 &lt;= num &lt; 231</code></p>\n<span id=\"more\"></span>\n\n\n\n<h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>本题使用动态规划，及通过前一步状态推导下一步状态，由题意可推导转移方程，流程如下图。</p>\n<img src=\"/2022/05/20/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%BA%8C/1.png\" alt=\"Picture1.png\" style=\"zoom: 50%;\">\n\n\n\n<h5 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h5><ul>\n<li><p><strong>状态定义：</strong>设动态规划列表 $dp$ ，$dp[i]$ 代表以 $x_i$ 为结尾的数字的翻译方案数量。</p>\n</li>\n<li><p><strong>转移方程：</strong>若 $x_i$和 $x_{i-1}$组成的两位数字可以被翻译，则$dp[i] &#x3D; dp[i - 1] + dp[i - 2]$；否则 $dp[i] &#x3D; dp[i - 1]$。</p>\n<p>可被翻译的两位数区间：当 $x_{i-1} &#x3D; 0$时，组成的两位数是无法被翻译的（例如 $00, 01, 02, \\cdots$），因此区间为 $[10, 25]$。<br>$dp[i] &#x3D; \\begin{cases} dp[i - 1] + dp[i - 2] &amp; {, 10 x_{i-1} + x_i \\in [10,25]} \\ dp[i - 1] &amp; {, 10 x_{i-1} + x_i \\in [0, 10) \\cup (25, 99]} \\end{cases}$</p>\n</li>\n<li><p><strong>返回值：</strong>$dp[n]$，及此数字的翻译方案数量。</p>\n</li>\n<li><p><strong>初始状态：</strong>$dp[0]&#x3D;dp[1]&#x3D;1$，即 “无数字” 和 “第 1 位数字” 的翻译方法数量均为 1 。</p>\n</li>\n<li><p><strong>空间优化：</strong>$dp[i],dp[i - 1]$，所以可使用两个变量 p,q 分别记录 $dp[i], dp[i - 1]$，两变量交替前进即可。此方法可省去 $dp$ 列表使用的 $O(N)$ 的额外空间。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">translateNum</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> String.valueOf(num);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>,q = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;i &lt;= s.length();i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">nums</span> <span class=\"operator\">=</span> s.substring(i-<span class=\"number\">2</span>, i);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> nums.compareTo(<span class=\"string\">&quot;10&quot;</span>) &gt;= <span class=\"number\">0</span> &amp;&amp; nums.compareTo(<span class=\"string\">&quot;25&quot;</span>) &lt;=<span class=\"number\">0</span> ? p + q : q;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">            q = c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"例题二\"><a href=\"#例题二\" class=\"headerlink\" title=\"例题二\"></a>例题二</h3><p>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"string\">&quot;abcabcbb&quot;</span></span><br><span class=\"line\">输出: <span class=\"number\">3</span> </span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 <span class=\"string\">&quot;abc&quot;</span>，所以其长度为 <span class=\"number\">3</span>。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"string\">&quot;bbbbb&quot;</span></span><br><span class=\"line\">输出: <span class=\"number\">1</span></span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 <span class=\"string\">&quot;b&quot;</span>，所以其长度为 <span class=\"number\">1</span>。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"string\">&quot;pwwkew&quot;</span></span><br><span class=\"line\">输出: <span class=\"number\">3</span></span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 <span class=\"string\">&quot;wke&quot;</span>，所以其长度为 <span class=\"number\">3</span>。</span><br><span class=\"line\">     请注意，你的答案必须是 子串 的长度，<span class=\"string\">&quot;pwke&quot;</span> 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<p><code>s.length &lt;= 40000</code></p>\n<h4 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路一：动态规划-哈希表\"><a href=\"#解题思路一：动态规划-哈希表\" class=\"headerlink\" title=\"解题思路一：动态规划 + 哈希表\"></a>解题思路一：动态规划 + 哈希表</h5><p>使用动态规划记录每增加一个字符的“最长不重复子字符串” 的长度是多少。</p>\n<p><strong>动态规划解析：</strong></p>\n<ul>\n<li><strong>状态定义：</strong> 设动态规划列表 $dp$ ，$dp[j]$代表以字符 $s[j]$ 为结尾的 “最长不重复子字符串” 的长度。</li>\n<li><strong>转移方程：</strong> 固定右边界 $j$ ，设字符 $s[j]$ 左边距离最近的相同字符为 $s[i]$ ，即 $s[i] &#x3D; s[j]$ 。<ul>\n<li>当 $i &lt; 0$，即 $s[j]$ 左边无相同字符，则 $dp[j] &#x3D; dp[j-1] + 1$；</li>\n<li>当 $dp[j - 1] &lt; j - i$，说明字符 $s[i]$ 在子字符串 $dp[j-1]$ <strong>区间之外</strong> ，则 $dp[j] &#x3D; dp[j - 1] + 1$ ；</li>\n<li>当 $dp[j - 1] \\geq j - i$，说明字符 $s[i]$ 在子字符串 $dp[j-1]$ <strong>区间之中</strong> ，则 $dp[j]$的左边界由 $s[i]$ 决定，即 $dp[j] &#x3D; j - i$；</li>\n<li>当 $i &lt; 0$ 时，由于 $dp[j - 1] \\leq j$ 恒成立，因而 $dp[j - 1] &lt; j - i$ 恒成立，因此分支 <code>1.</code> 和 <code>2.</code> 可被合并。</li>\n</ul>\n</li>\n</ul>\n<p>$$<br>dp[j] &#x3D; \\begin{cases} dp[j - 1] + 1 &amp; , dp[j-1] &lt; j - i \\ j - i &amp; , dp[j-1] \\geq j - i \\end{cases}<br>$$</p>\n<ul>\n<li><strong>返回值：</strong> $\\max(dp)$，即全局的 “最长不重复子字符串” 的长度。</li>\n</ul>\n<img src=\"/2022/05/20/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%BA%8C/2.png\" alt=\"Picture1.png\" style=\"zoom: 67%;\">\n\n<p><strong>优化空间复杂度</strong></p>\n<ul>\n<li>由于返回值是取 $dp$ 列表最大值，因此可借助变量 $tmp$ 存储 $dp[j]$ ，变量 $res$ 每轮更新最大值即可。</li>\n<li>此优化可节省 $dp$ 列表使用的 $O(N)$ 大小的额外空间。</li>\n</ul>\n<p><strong>哈希表</strong></p>\n<ul>\n<li>哈希表统计： 遍历字符串 $s$ 时，使用哈希表（记为 $dic$ ）统计 各字符最后一次出现的索引位置 。</li>\n<li>左边界 $i$ 获取方式： 遍历到 $s[j]$ 时，可通过访问哈希表 $dic[s[j]]$ 获取最近的相同字符的索引 $i$ 。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        Map&lt;Character, Integer&gt; dic = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> dic.getOrDefault(s.charAt(j), -<span class=\"number\">1</span>); <span class=\"comment\">// 获取索引 i</span></span><br><span class=\"line\">            dic.put(s.charAt(j), j); <span class=\"comment\">// 更新哈希表</span></span><br><span class=\"line\">            tmp = tmp &lt; j - i ? tmp + <span class=\"number\">1</span> : j - i; <span class=\"comment\">// dp[j - 1] -&gt; dp[j]</span></span><br><span class=\"line\">            res = Math.max(res, tmp); <span class=\"comment\">// max(dp[j - 1], dp[j])</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"解题思路二：滑动窗口\"><a href=\"#解题思路二：滑动窗口\" class=\"headerlink\" title=\"解题思路二：滑动窗口\"></a>解题思路二：滑动窗口</h5><p>找出<strong>从每一个字符开始的，不包含重复字符的最长子串</strong>，那么其中最长的那个字符串即为答案。对于示例一中的字符串，我们列举出这些结果，其中括号中表示选中的字符以及最长的字符串：</p>\n<ul>\n<li><p>使用两个指针表示字符串中的某个子串（或窗口）的左右边界，其中左指针代表着「枚举子串的起始位置」，而右指针即为最长子串结束位置的 $r_k$；</p>\n</li>\n<li><p>在每一步的操作中，将左指针向右移动一格，表示开始枚举下一个字符作为起始位置，然后不断地向右移动右指针，但需要保证这两个指针对应的子串中没有重复的字符。在移动结束后，这个子串就对应着 以左指针开始的，不包含重复字符的最长子串。记录下这个子串的长度；</p>\n</li>\n<li><p>在枚举结束后，找到的最长的子串的长度即为答案。</p>\n</li>\n</ul>\n<p><strong>判断重复字符</strong></p>\n<p>在上面的流程中，还需要使用一种数据结构来判断 <strong>是否有重复的字符</strong>，常用的数据结构为哈希集合（即 C++ 中的 std::unordered_set，Java 中的 HashSet，Python 中的 set, JavaScript 中的 Set）。在左指针向右移动的时候，从哈希集合中移除一个字符，在右指针向右移动的时候，往哈希集合中添加一个字符。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 哈希集合，记录每个字符是否出现过</span></span><br><span class=\"line\">        Set&lt;Character&gt; occ = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;Character&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">        <span class=\"comment\">// 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rk</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 左指针向右移动一格，移除一个字符</span></span><br><span class=\"line\">                occ.remove(s.charAt(i - <span class=\"number\">1</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (rk + <span class=\"number\">1</span> &lt; n &amp;&amp; !occ.contains(s.charAt(rk + <span class=\"number\">1</span>))) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 不断地移动右指针</span></span><br><span class=\"line\">                occ.add(s.charAt(rk + <span class=\"number\">1</span>));</span><br><span class=\"line\">                ++rk;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 第 i 到 rk 个字符是一个极长的无重复字符子串</span></span><br><span class=\"line\">            ans = Math.max(ans, rk - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>参考来源：力扣（LeetCode）</p>\n<p>作者：jyd、LeetCode-Solution</p>\n</blockquote>\n","categories":["LeetCode学习","动态规划"],"tags":["算法","动态规划","字符串"]},{"title":"搜索与回溯算法","url":"/2022/05/15/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/","content":"<h3 id=\"例题一\"><a href=\"#例题一\" class=\"headerlink\" title=\"例题一\"></a>例题一</h3><p>从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。</p>\n<p><strong>例如:</strong><br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"number\">3</span></span><br><span class=\"line\"> / \\</span><br><span class=\"line\"><span class=\"number\">9</span>  <span class=\"number\">20</span></span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> <span class=\"number\">15</span>   <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p><strong>返回：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">3</span>,<span class=\"number\">9</span>,<span class=\"number\">20</span>,<span class=\"number\">15</span>,<span class=\"number\">7</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>节点总数 &lt;&#x3D; 1000</li>\n</ul>\n<span id=\"more\"></span>\n\n\n\n<h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><ul>\n<li>题目要求的二叉树的 <strong>从上至下</strong> 打印（即按层打印），又称为二叉树的 <strong>广度优先搜索</strong>（BFS）。</li>\n<li>BFS 通常借助 <strong>队列</strong> 的先入先出特性来实现。</li>\n</ul>\n<img src=\"/2022/05/15/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/1.png\" alt=\"Picture0.png\" style=\"zoom: 67%;\">\n\n\n\n<h5 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h5><ol>\n<li><strong>特例处理：</strong>当根节点为空时，直接返回空列表[]；</li>\n<li><strong>初始化：</strong>打印结果列表<code>list</code>，队列<code>queue[]</code>将<code>root</code>根节点放入队列；</li>\n<li><strong>BFS循环：</strong>当队列为空时退出循环<ul>\n<li><strong>出队：</strong>队首元素出队，记为<code>T</code>；</li>\n<li><strong>打印：</strong>将<code>T.val</code>添加至列表<code>list</code>尾部；</li>\n<li><strong>添加子节点：</strong>若<code>T</code>的左(右)节点不为空，则将左(右)节点加入队列<code>queue</code>；</li>\n</ul>\n</li>\n<li><strong>返回值：</strong>将打印列表转为数组<code>res</code>，返回数组<code>res</code>即可。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] levelOrder(TreeNode root) &#123;</span><br><span class=\"line\">        Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class=\"line\">        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;Integer&gt;();   </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        queue.add(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"type\">TreeNode</span> <span class=\"variable\">T</span> <span class=\"operator\">=</span> queue.remove();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T.left != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                queue.add(T.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T.right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                queue.add(T.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            list.add(T.val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[list.size()];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; list.size(); i++)</span><br><span class=\"line\">                res[i] = list.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"例题二\"><a href=\"#例题二\" class=\"headerlink\" title=\"例题二\"></a>例题二</h3><p>请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。</p>\n<p><strong>例如:</strong><br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"number\">3</span></span><br><span class=\"line\"> / \\</span><br><span class=\"line\"><span class=\"number\">9</span>  <span class=\"number\">20</span></span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> <span class=\"number\">15</span>   <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>返回其层次遍历结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">3</span>],</span><br><span class=\"line\">  [<span class=\"number\">20</span>,<span class=\"number\">9</span>],</span><br><span class=\"line\">  [<span class=\"number\">15</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n<p>提示：</p>\n<ul>\n<li>节点总数 &lt;&#x3D; 1000</li>\n</ul>\n<h4 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路：层序遍历-双端队列\"><a href=\"#解题思路：层序遍历-双端队列\" class=\"headerlink\" title=\"解题思路：层序遍历 + 双端队列\"></a>解题思路：层序遍历 + 双端队列</h5><ul>\n<li>利用双端队列的两端皆可添加元素的特性，设打印列表（双端队列)<code>tmp</code>，并规定：<ul>\n<li>奇数层 则添加至 <code>tmp</code> <strong>尾部</strong> ，</li>\n<li>偶数层 则添加至 <code>tmp</code> <strong>头部</strong> 。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/2022/05/15/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/2.png\" alt=\"Picture1.png\" style=\"zoom: 67%;\">\n\n\n\n<h5 id=\"算法流程：\"><a href=\"#算法流程：\" class=\"headerlink\" title=\"算法流程：\"></a>算法流程：</h5><ol>\n<li><strong>特例处理：</strong> 当树的根节点为空，则直接返回空列表 <code>[]</code> ；</li>\n<li><strong>初始化：</strong> 打印结果空列表 <code>res</code> ，包含根节点的双端队列 <code>deque</code> ；</li>\n<li><strong>BFS 循环：</strong> 当 <code>deque</code> 为空时跳出；<ul>\n<li>新建列表 <code>tmp</code> ，用于临时存储当前层打印结果；</li>\n<li><strong>当前层打印循环：</strong> 循环次数为当前层节点数（即 <code>deque</code> 长度）；<ul>\n<li><strong>出队：</strong> 队首元素出队，记为 <code>node</code>；</li>\n<li><strong>打印：</strong> 若为奇数层，将 <code>node.val</code> 添加至 <code>tmp</code> 尾部；否则，添加至 <code>tmp</code>头部；</li>\n<li><strong>添加子节点：</strong> 若 <code>node</code> 的左（右）子节点不为空，则加入 <code>deque</code> ；</li>\n</ul>\n</li>\n<li>将当前层结果 <code>tmp</code> 转化为 <code>list</code> 并添加入 <code>res</code> ；</li>\n</ul>\n</li>\n<li><strong>返回值：</strong> 返回打印结果列表 <code>res</code> 即可；</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">levelOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root != <span class=\"literal\">null</span>) </span><br><span class=\"line\">            queue.add(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!queue.isEmpty()) &#123;</span><br><span class=\"line\">            LinkedList&lt;Integer&gt; tmp = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> queue.size(); i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"type\">TreeNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> queue.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(res.size() % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    tmp.addLast(node.val); <span class=\"comment\">// 偶数层 -&gt; 队列头部</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    tmp.addFirst(node.val); <span class=\"comment\">// 奇数层 -&gt; 队列尾部</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node.left != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    queue.add(node.left);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node.right != <span class=\"literal\">null</span>) </span><br><span class=\"line\">                    queue.add(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.add(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>参考来源：力扣（LeetCode）</p>\n<p>作者：jyd</p>\n</blockquote>\n","categories":["LeetCode学习","搜索与回溯算法"],"tags":["算法","二叉树","广度优先搜索"]},{"title":"搜索与回溯算法二","url":"/2022/05/16/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E4%BA%8C/","content":"<h3 id=\"例题一\"><a href=\"#例题一\" class=\"headerlink\" title=\"例题一\"></a>例题一</h3><p>输入两棵二叉树<em>A</em>和<em>B</em>，判断<em>B</em>是不是<em>A</em>的子结构。(约定空树不是任意一个树的子结构)</p>\n<p><em>B</em>是<em>A</em>的子结构， 即 <em>A</em>中有出现和<em>B</em>相同的结构和节点值。</p>\n<p><strong>例如:</strong><br>给定的树 <em>A</em>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"number\">3</span></span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  <span class=\"number\">4</span>   <span class=\"number\">5</span></span><br><span class=\"line\"> / \\</span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>给定的树 <em>B</em>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"number\">4</span> </span><br><span class=\"line\"> /</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>返回 <code>true</code>，因为 <em>B</em> 与 <em>A</em> 的一个子树拥有相同的结构和节点值。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：A = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], B = [<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：A = [<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>], B = [<span class=\"number\">4</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>限制：</strong></p>\n<p><code>0 &lt;= 节点个数 &lt;= 10000</code></p>\n<span id=\"more\"></span>\n\n\n\n<h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><p>由题意可知，若树<em>B</em>是树<em>A</em>的子结构，则子结构的根节点可能是树<em>A</em>的任意一个节点。因此需要判断树<em>B</em>是不是树<em>A</em>的子结构，只需要判断树<em>B</em>是否为树<em>A</em>的子节点，通过以下两步完成工作：</p>\n<ol>\n<li>先序遍历树<em>A</em>中每个节点$n_A$;(对应函数<code>isSubStructure(A, B)</code>)</li>\n<li>判断树 <em>A</em>中 <strong>以 $n_A$为根节点的子树</strong> 是否包含树 <em>B</em> 。（对应函数 <code>recur(A, B)</code>）</li>\n</ol>\n<img src=\"/2022/05/16/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E4%BA%8C/1.png\" alt=\"Picture1.png\" style=\"zoom: 50%;\">\n\n\n\n<h5 id=\"算法流程：\"><a href=\"#算法流程：\" class=\"headerlink\" title=\"算法流程：\"></a>算法流程：</h5><p><strong><code>recur(A, B)</code> 函数：</strong></p>\n<ol>\n<li><strong>终止条件：</strong><ul>\n<li>当节点 <em>B</em> 为空：说明树 <em>B</em> 已匹配完成（越过叶子节点），因此返回 <code>true</code> ；</li>\n<li>当节点 <em>A</em> 为空：说明已经越过树 <em>A</em> 叶子节点，即匹配失败，返回 <code>false</code> ；</li>\n<li>当节点 <em>A</em> 和 <em>B</em>  的值不同：说明匹配失败，返回 <code>false</code> ；</li>\n</ul>\n</li>\n<li><strong>返回值：</strong><ul>\n<li>判断 <em>A</em> 和 <em>B</em>  的左子节点是否相等，即 <code>recur(A.left, B.left)</code> ；</li>\n<li>判断 <em>A</em> 和 <em>B</em>  的右子节点是否相等，即 <code>recur(A.right, B.right)</code> ；</li>\n</ul>\n</li>\n</ol>\n<p><strong><code>isSubStructure(A, B)</code> 函数：</strong></p>\n<ol>\n<li><strong>特例处理：</strong> 当 树 <em>A</em> 为空 或 树 <em>B</em>为空 时，直接返回 <code>false</code> ；</li>\n<li><strong>返回值：</strong> 若树 <em>B</em>是树 <em>A</em>的子结构，则必满足以下三种情况之一，因此用或 <code>||</code> 连接；<ul>\n<li>以 节点 <em>A</em>为根节点的子树 包含树 <em>B</em>，对应 <code>recur(A, B)</code>；</li>\n<li>树 <em>B</em>是 树 <em>A</em>左子树 的子结构，对应 <code>isSubStructure(A.left, B)</code>；</li>\n<li>树 <em>B</em> 是 树 <em>A</em>右子树 的子结构，对应 <code>isSubStructure(A.right, B)</code>；</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSubStructure</span><span class=\"params\">(TreeNode A, TreeNode B)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (A != <span class=\"literal\">null</span> &amp;&amp; B != <span class=\"literal\">null</span>) &amp;&amp; (recur(A, B) || isSubStructure(A.left, B) || isSubStructure(A.right, B));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">recur</span><span class=\"params\">(TreeNode A, TreeNode B)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(B == <span class=\"literal\">null</span>) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A == <span class=\"literal\">null</span> || A.val != B.val) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> recur(A.left, B.left) &amp;&amp; recur(A.right, B.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"例题二\"><a href=\"#例题二\" class=\"headerlink\" title=\"例题二\"></a>例题二</h3><p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p>\n<p>例如，二叉树 <code>[1,2,2,3,4,4,3]</code> 是对称的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"number\">1</span></span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  <span class=\"number\">2</span>   <span class=\"number\">2</span></span><br><span class=\"line\"> / \\ / \\</span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">4</span> <span class=\"number\">4</span>  <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>但是下面这个 <code>[1,2,2,null,3,null,3]</code> 则不是镜像对称的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"number\">1</span></span><br><span class=\"line\"> / \\</span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"number\">2</span></span><br><span class=\"line\"> \\   \\</span><br><span class=\"line\"> <span class=\"number\">3</span>    <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：root = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">输出：<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：root = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"literal\">null</span>,<span class=\"number\">3</span>,<span class=\"literal\">null</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">输出：<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>限制：</strong></p>\n<p><code>0 &lt;= 节点个数 &lt;= 1000</code></p>\n<h4 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路：-1\"><a href=\"#解题思路：-1\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h5><ul>\n<li><strong>对称二叉树定义：</strong> 对于树中 <strong>任意两个对称节点</strong>  <em>L</em> 和 <em>R</em> ，一定有：<ul>\n<li><code>L.val = R.val</code>：即此两对称节点值相等。</li>\n<li><code>L.left.val = R.right.val</code>：即 <em>L</em>的 左子节点 和 <em>R</em>的 右子节点 对称；</li>\n<li><code>L.right.val = R.left.val</code>：即 <em>L</em>的 右子节点 和 <em>R</em>的 左子节点 对称。</li>\n</ul>\n</li>\n<li>根据以上规律，考虑从顶至底递归，判断每对节点是否对称，从而判断树是否为对称二叉树。</li>\n</ul>\n<img src=\"/2022/05/16/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E4%BA%8C/2.png\" alt=\"Picture1.png\" style=\"zoom:50%;\">\n\n\n\n<h5 id=\"算法流程：-1\"><a href=\"#算法流程：-1\" class=\"headerlink\" title=\"算法流程：\"></a>算法流程：</h5><p><code>isSymmetric(root)</code>：</p>\n<ul>\n<li><strong>特例处理：</strong> 若根节点 <code>root</code> 为空，则直接返回 <code>true</code> 。</li>\n<li><strong>返回值：</strong> 即 <code>recur(root.left, root.right)</code> ;</li>\n</ul>\n<p><code>recur(L, R)</code>：</p>\n<ul>\n<li><strong>终止条件：</strong><ul>\n<li>当 <em>L</em>和 <em>R</em>同时越过叶节点： 此树从顶至底的节点都对称，因此返回<code>true</code> ；</li>\n<li>当 <em>L</em>或 <em>R</em>中只有一个越过叶节点： 此树不对称，因此返回<code>false</code> ；</li>\n<li>当节点 <em>L</em>值 $\\ne$ 节点 <em>R</em>值： 此树不对称，因此返回 <code>false</code>；</li>\n</ul>\n</li>\n<li><strong>递推工作：</strong><ul>\n<li>判断两节点 <code>L.left</code> 和 <code>R.right</code> 是否对称，即 <code>recur(L.left, R.right)</code>；</li>\n<li>判断两节点 <code>L.right</code> 和 <code>R.left</code> 是否对称，即 <code>recur(L.right, R.left)</code>；</li>\n</ul>\n</li>\n<li><strong>返回值：</strong> 两对节点都对称时，才是对称树，因此用与逻辑符 <code>&amp;&amp;</code> 连接。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSymmetric</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">return</span> <span class=\"variable\">root</span> <span class=\"operator\">=</span>= <span class=\"literal\">null</span> ? <span class=\"literal\">true</span> : recur(root.left, root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">recur</span><span class=\"params\">(TreeNode L, TreeNode R)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L == <span class=\"literal\">null</span> &amp;&amp; R == <span class=\"literal\">null</span>) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L == <span class=\"literal\">null</span> || R == <span class=\"literal\">null</span> || L.val != R.val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> recur(L.left, R.right) &amp;&amp; recur(L.right, R.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>参考来源：力扣（LeetCode）</p>\n<p>作者：jyd</p>\n</blockquote>\n","categories":["LeetCode学习","搜索与回溯算法"],"tags":["算法","二叉树","深度优先搜索"]},{"title":"查找算法","url":"/2022/05/14/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/","content":"<h3 id=\"例题一\"><a href=\"#例题一\" class=\"headerlink\" title=\"例题一\"></a>例题一</h3><p>在一个 <code>n * m</code> 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<p><strong>示例:</strong></p>\n<p>现有矩阵 <code>matrix</code> 如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">1</span>,   <span class=\"number\">4</span>,  <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>,   <span class=\"number\">5</span>,  <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">19</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>,   <span class=\"number\">6</span>,  <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">22</span>],</span><br><span class=\"line\">  [<span class=\"number\">10</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">17</span>, <span class=\"number\">24</span>],</span><br><span class=\"line\">  [<span class=\"number\">18</span>, <span class=\"number\">21</span>, <span class=\"number\">23</span>, <span class=\"number\">26</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n<p>给定 <code>target = 5</code>，返回 <code>true</code>。</p>\n<p>给定 <code>target = 20</code>，返回 <code>false</code>。</p>\n<p><strong>限制：</strong></p>\n<p><code>0 &lt;= n &lt;= 1000</code></p>\n<p><code>0 &lt;= m &lt;= 1000</code></p>\n<span id=\"more\"></span>\n\n<h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路一：暴力\"><a href=\"#解题思路一：暴力\" class=\"headerlink\" title=\"解题思路一：暴力\"></a>解题思路一：暴力</h5><p>如果不考虑二维数组排好序的特点，则直接遍历整个二维数组的每一个元素，判断目标值是否在二维数组中存在。</p>\n<p>依次遍历二维数组的每一行和每一列。如果找到一个元素等于目标值，则返回 true。如果遍历完毕仍未找到等于目标值的元素，则返回 false。<strong>（不推荐）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">findNumberIn2DArray</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matrix == <span class=\"literal\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rows</span> <span class=\"operator\">=</span> matrix.length, columns = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; rows; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; columns; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (matrix[i][j] == target) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"解题思路二：二分查找\"><a href=\"#解题思路二：二分查找\" class=\"headerlink\" title=\"解题思路二：二分查找\"></a>解题思路二：二分查找</h5><p>由于给定的二维数组具备每行从左到右递增以及每列从上到下递增的特点，当访问到一个元素时，可以排除数组中的部分元素。</p>\n<p>从二维数组的右上角开始查找。如果当前元素等于目标值，则返回 <code>true</code>。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。</p>\n<p>可以证明这种方法不会错过目标值。如果当前元素大于目标值，说明当前元素的下边的所有元素都一定大于目标值，因此往下查找不可能找到目标值，往左查找可能找到目标值。如果当前元素小于目标值，说明当前元素的左边的所有元素都一定小于目标值，因此往左查找不可能找到目标值，往下查找可能找到目标值。</p>\n<ul>\n<li><p>若数组为空，返回 <code>false</code></p>\n</li>\n<li><p>初始化行下标为 <code>0</code>，列下标为二维数组的列数减<code> 1</code></p>\n<ul>\n<li>重复下列步骤，直到行下标或列下标超出边界</li>\n<li>获得当前下标位置的元素 <code>num</code></li>\n<li>如果 <code>num</code> 和 <code>target </code>相等，返回 <code>true</code></li>\n<li>如果 <code>num</code> 大于 <code>target</code>，列下标减 <code>1</code></li>\n<li>如果 <code>num</code> 小于 <code>target</code>，行下标加 <code>1</code></li>\n</ul>\n</li>\n<li><p>循环体执行完毕仍未找到元素等于 <code>target</code> ，说明不存在这样的元素，返回 <code>false</code>。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">findNumberIn2DArray</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matrix == <span class=\"literal\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">long1</span> <span class=\"operator\">=</span> matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">high1</span> <span class=\"operator\">=</span> matrix.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">long2</span> <span class=\"operator\">=</span> long1 - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">high2</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(high2 &lt; high1 &amp;&amp; long2 &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[high2][long2] == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(matrix[high2][long2] &lt; target)&#123;</span><br><span class=\"line\">                high2++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                long2--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"例题二\"><a href=\"#例题二\" class=\"headerlink\" title=\"例题二\"></a>例题二</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。</p>\n<p>给你一个可能存在 重复 元素值的数组 <code>numbers</code> ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的最小元素。例如，数组 <code>[3,4,5,1,2]</code> 为 <code>[1,2,3,4,5]</code> 的一次旋转，该数组的最小值为 <code>1</code>。  </p>\n<p>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 旋转一次 的结果为数组 <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：numbers = [<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出：<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：numbers = [<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>n == numbers.length</code></li>\n<li><code>1 &lt;= n &lt;= 5000</code></li>\n<li><code>-5000 &lt;= numbers[i] &lt;= 5000</code></li>\n<li><code>numbers</code> 原来是一个升序排序的数组，并进行了 <code>1</code> 至 <code>n</code> 次旋转</li>\n</ul>\n<h4 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路：二分查找\"><a href=\"#解题思路：二分查找\" class=\"headerlink\" title=\"解题思路：二分查找\"></a>解题思路：二分查找</h5><p>一个包含重复元素的升序数组在经过旋转之后，可以得到下面可视化的折线图：</p>\n<img src=\"/2022/05/14/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/1.png\" alt=\"fig1\">\n\n<p>其中横轴表示数组元素的下标，纵轴表示数组元素的值。图中标出了最小值的位置，是我们需要查找的目标。</p>\n<p>我们考虑数组中的最后一个元素 <code>x</code>：在最小值右侧的元素，它们的值一定都小于等于 <code>x</code>；而在最小值左侧的元素，它们的值一定都大于等于 <code>x</code>。因此，我们可以根据这一条性质，通过二分查找的方法找出最小值。</p>\n<p>在二分查找的每一步中，左边界为 <code>low</code>，右边界为 <code>high</code>，区间的中点为 <code>pivot</code>，最小值就在该区间内。我们将中轴元素 <code>numbers[pivot]</code> 与右边界元素 <code>numbers[high]</code> 进行比较，可能会有以下的三种情况：</p>\n<p>第一种情况是 <code>numbers[pivot]&lt;numbers[high]</code>。如下图所示，这说明 <code>numbers[pivot]</code> 是最小值右侧的元素，因此我们可以忽略二分查找区间的右半部分。</p>\n<img src=\"/2022/05/14/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/2.png\" alt=\"fig2\">\n\n<p>第二种情况是<code>numbers[pivot]&gt;numbers[high]</code>。如下图所示，这说明 <code>numbers[pivot]</code>是最小值左侧的元素，因此我们可以忽略二分查找区间的左半部分。</p>\n<p><img src=\"/2022/05/14/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/3.png\" alt=\"fig3\"></p>\n<p>第三种情况是 <code>numbers[pivot]==numbers[high]</code>。如下图所示，由于重复元素的存在，我们并不能确定<code>numbers[pivot]</code> 究竟在最小值的左侧还是右侧，因此我们不能莽撞地忽略某一部分的元素。我们唯一可以知道的是，由于它们的值相同，所以无论 <code>numbers[high]</code> 是不是最小值，都有一个它的「替代品」<code>numbers[pivot]</code>，因此我们可以忽略二分查找区间的右端点。</p>\n<p><img src=\"/2022/05/14/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/4.png\" alt=\"fig4\"></p>\n<p>当二分查找结束时，我们就得到了最小值所在的位置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minArray</span><span class=\"params\">(<span class=\"type\">int</span>[] numbers)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> numbers.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start &lt; end)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> start + (end - start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(numbers[mid] &gt; numbers[end])&#123;</span><br><span class=\"line\">                start = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(numbers[mid] &lt; numbers[end])&#123;</span><br><span class=\"line\">                end = mid;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                end--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> numbers[start];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>参考来源：力扣（LeetCode）</p>\n<p>作者：LeetCode-Solution</p>\n</blockquote>\n","categories":["LeetCode学习","查找算法"],"tags":["算法","数组","二分查找"]},{"title":"栈与队列","url":"/2022/05/04/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/","content":"<h3 id=\"例题一\"><a href=\"#例题一\" class=\"headerlink\" title=\"例题一\"></a>例题一</h3><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\">[<span class=\"string\">&quot;CQueue&quot;</span>,<span class=\"string\">&quot;appendTail&quot;</span>,<span class=\"string\">&quot;deleteHead&quot;</span>,<span class=\"string\">&quot;deleteHead&quot;</span>]</span><br><span class=\"line\">[[],[<span class=\"number\">3</span>],[],[]]</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"number\">3</span>,-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\">[<span class=\"string\">&quot;CQueue&quot;</span>,<span class=\"string\">&quot;deleteHead&quot;</span>,<span class=\"string\">&quot;appendTail&quot;</span>,<span class=\"string\">&quot;appendTail&quot;</span>,<span class=\"string\">&quot;deleteHead&quot;</span>,<span class=\"string\">&quot;deleteHead&quot;</span>]</span><br><span class=\"line\">[[],[],[<span class=\"number\">5</span>],[<span class=\"number\">2</span>],[],[]]</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"literal\">null</span>,-<span class=\"number\">1</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= values &lt;= 10000</code></li>\n<li><code>最多会对 appendTail、deleteHead 进行 10000 次调用</code></li>\n</ul>\n<h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><ul>\n<li><strong>栈无法实现队列功能:</strong>\t栈为先进后出，队列为先进先出</li>\n<li><strong>双栈可实现列表倒叙:</strong>    用栈B元素实现对栈A的倒叙</li>\n<li><strong>利用栈B删除队首元素</strong>    B出栈相当于删除栈A的栈底元素，及队列首元素</li>\n</ul>\n<h5 id=\"函数设计\"><a href=\"#函数设计\" class=\"headerlink\" title=\"函数设计\"></a>函数设计</h5><ul>\n<li><strong>加入队首<code>appendTail()</code>函数：</strong>将数字val加入栈<code>A</code>即可。</li>\n<li>**删除队尾<code>deleteHead()</code>:**分几种情况。<ol>\n<li><strong>当栈B不为空：</strong>B中仍有已完成倒叙的元素，因此只需要返回B中的栈顶元素即可。</li>\n<li><strong>否则，当A为空时：</strong>当两个栈都为空时，无元素，返回-1。</li>\n<li><strong>否则：</strong>将栈A所有元素转移到栈B中，实现元素倒叙，并返回栈B元素的栈顶元素。</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CQueue</span> &#123;</span><br><span class=\"line\">    Stack&lt;Integer&gt; in,out;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CQueue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        in = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        out = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">appendTail</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        in.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">deleteHead</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//当out栈不为空时，返回栈顶元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!out.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> out.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当in栈为空时，返回-1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(in.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当out栈为空时，将in栈中元素转到out栈中</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!in.isEmpty())&#123;</span><br><span class=\"line\">            out.push(in.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> out.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"例题二\"><a href=\"#例题二\" class=\"headerlink\" title=\"例题二\"></a>例题二</h3><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">MinStack</span> <span class=\"variable\">minStack</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MinStack</span>();</span><br><span class=\"line\">minStack.push(-<span class=\"number\">2</span>);</span><br><span class=\"line\">minStack.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">minStack.push(-<span class=\"number\">3</span>);</span><br><span class=\"line\">minStack.min();   --&gt; 返回 -<span class=\"number\">3.</span></span><br><span class=\"line\">minStack.pop();</span><br><span class=\"line\">minStack.top();      --&gt; 返回 <span class=\"number\">0.</span></span><br><span class=\"line\">minStack.min();   --&gt; 返回 -<span class=\"number\">2.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<p>各函数的调用总次数不超过 20000 次</p>\n<h4 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>对于栈来说，如果一个元素 <code>a</code> 在入栈时，栈里有其它的元素 <code>b, c, d</code>，那么无论这个栈在之后经历了什么操作，只要 <code>a</code> 在栈中，<code>b, c, d</code> 就一定在栈中，因为在 <code>a</code> 被弹出之前，b, c, d 不会被弹出。</p>\n<p>因此，在操作过程中的任意一个时刻，只要栈顶的元素是 a，那么我们就可以确定栈里面现在的元素一定是 <code>a, b, c, d</code>。</p>\n<p>那么，我们可以在每个元素 <code>a</code> 入栈时把当前栈的最小值 m 存储起来。在这之后无论何时，如果栈顶元素是 <code>a</code>，我们就可以直接返回存储的最小值 <code>m</code>。</p>\n<h5 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h5><p>按照上面的思路，我们只需要设计一个数据结构，使得每个元素<code>a</code>与其相应的最小值 <code>m</code> 时刻保持一一对应。因此我们可以使用一个辅助栈，与元素栈同步插入与删除，用于存储与每个元素对应的最小值。</p>\n<ul>\n<li><p>当一个元素要入栈时，我们取当前辅助栈的栈顶存储的最小值，与当前元素比较得出最小值，将这个最小值插入辅助栈中；</p>\n</li>\n<li><p>当一个元素要出栈时，我们把辅助栈的栈顶元素也一并弹出；</p>\n</li>\n<li><p>在任意一个时刻，栈内元素的最小值就存储在辅助栈的栈顶元素中。</p>\n</li>\n</ul>\n<h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinStack</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** initialize your data structure here. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Stack&lt;Integer&gt; A,B;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MinStack</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        A = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        B = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        A.push(x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(B.empty() || B.peek() &gt;= x)&#123;</span><br><span class=\"line\">            B.push(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A.pop().equals(B.peek()))&#123;</span><br><span class=\"line\">            B.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">top</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> A.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">min</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> B.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>参考来源：力扣（LeetCode）</p>\n<p>作者：LeetCode-Solution</p>\n</blockquote>\n","categories":["LeetCode学习","栈"],"tags":["算法","栈与队列"]},{"title":"链表","url":"/2022/05/09/%E9%93%BE%E8%A1%A8/","content":"<h3 id=\"例题一\"><a href=\"#例题一\" class=\"headerlink\" title=\"例题一\"></a>例题一</h3><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>-&gt;NULL</span><br><span class=\"line\">输出: <span class=\"number\">5</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">1</span>-&gt;NULL</span><br></pre></td></tr></table></figure>\n\n<p><strong>限制：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> &lt;= 节点个数 &lt;= <span class=\"number\">5000</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><h5 id=\"解题思路一：迭代\"><a href=\"#解题思路一：迭代\" class=\"headerlink\" title=\"解题思路一：迭代\"></a>解题思路一：迭代</h5><p>假设链表为 <code>1→2→3→∅</code>，我们想要把它改成<code>∅←1←2←3</code>。</p>\n<p>在遍历链表时，将当前节点的<code>next</code>指针改为指向前一个节点。由于该节点没有引用其前一个节点，因此需要事先准备一个空节点储存前一个节点，在更改引用之前还需要存储后一个节点。最后返回新的头节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">reverseList</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;      <span class=\"comment\">//用来储存倒叙</span></span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> head;      </span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;      </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(c != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            n = c.next;</span><br><span class=\"line\">            c.next = p;</span><br><span class=\"line\">            p = c;</span><br><span class=\"line\">            c = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路二：递归\"><a href=\"#解题思路二：递归\" class=\"headerlink\" title=\"解题思路二：递归\"></a>解题思路二：递归</h5><ul>\n<li>使用递归函数，一直递归到链表的最后一个结点，该结点就是反转后的头结点，记作 <code>newHead</code> .</li>\n<li>此后，每次函数在返回的过程中，让当前结点的下一个结点的 <code>next</code>指针指向当前节点。</li>\n<li>同时让当前结点的 <code>next</code> 指针指向 <code>null</code> ，从而实现从链表尾部开始的局部反转</li>\n<li>当递归函数全部出栈后，链表反转完成。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">reverseList</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span> || head.next == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">newHead</span> <span class=\"operator\">=</span> reverseList(head.next);</span><br><span class=\"line\">        head.next.next = head;</span><br><span class=\"line\">        head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>递归较难理解，用笔演算一遍会好一点。</strong></p>\n<hr>\n<h3 id=\"例题二\"><a href=\"#例题二\" class=\"headerlink\" title=\"例题二\"></a>例题二</h3><p>请实现 <code>copyRandomList</code> 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 <code>next</code> 指针指向下一个节点，还有一个 <code>random</code> 指针指向链表中的任意节点或者 <code>null</code>。</p>\n<p><strong>示例1</strong></p>\n<p><img src=\"/2022/05/09/%E9%93%BE%E8%A1%A8/e1.png\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：head = [[<span class=\"number\">7</span>,<span class=\"literal\">null</span>],[<span class=\"number\">13</span>,<span class=\"number\">0</span>],[<span class=\"number\">11</span>,<span class=\"number\">4</span>],[<span class=\"number\">10</span>,<span class=\"number\">2</span>],[<span class=\"number\">1</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\">输出：[[<span class=\"number\">7</span>,<span class=\"literal\">null</span>],[<span class=\"number\">13</span>,<span class=\"number\">0</span>],[<span class=\"number\">11</span>,<span class=\"number\">4</span>],[<span class=\"number\">10</span>,<span class=\"number\">2</span>],[<span class=\"number\">1</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例2</strong></p>\n<img src=\"/2022/05/09/%E9%93%BE%E8%A1%A8/e2.png\" alt=\"img\" style=\"zoom:67%;\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：head = [[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">1</span>]]</span><br><span class=\"line\">输出：[[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">1</span>]]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例3</strong></p>\n<img src=\"/2022/05/09/%E9%93%BE%E8%A1%A8/e3.png\" alt=\"img\" style=\"zoom:67%;\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：head = [[<span class=\"number\">3</span>,<span class=\"literal\">null</span>],[<span class=\"number\">3</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"literal\">null</span>]]</span><br><span class=\"line\">输出：[[<span class=\"number\">3</span>,<span class=\"literal\">null</span>],[<span class=\"number\">3</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"literal\">null</span>]]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 4：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：head = []</span><br><span class=\"line\">输出：[]</span><br><span class=\"line\">解释：给定的链表为空（空指针），因此返回 <span class=\"literal\">null</span>。</span><br></pre></td></tr></table></figure>\n\n<p> <strong>提示：</strong></p>\n<ul>\n<li><code>-10000 &lt;= Node.val &lt;= 10000</code></li>\n<li><code>Node.random</code> 为空（null）或指向链表中的节点。</li>\n<li>节点数目不超过 1000 。</li>\n</ul>\n<h4 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p><strong>回溯+哈希表</strong></p>\n<p>如果是普通链表，我们可以直接按照遍历的顺序创建链表节点。而本题中因为随机指针的存在，当我们拷贝节点时，「当前节点的随机指针指向的节点」可能还没创建，因此我们需要变换思路。一个可行方案是，我们利用回溯的方式，让每个节点的拷贝操作相互独立。对于当前节点，我们首先要进行拷贝，然后我们进行「当前节点的后继节点」和「当前节点的随机指针指向的节点」拷贝，拷贝完成后将创建的新节点的指针返回，即可完成当前节点的两指针的赋值。</p>\n<p>具体地，我们用哈希表记录每一个节点对应新节点的创建情况。遍历该链表的过程中，我们检查「当前节点的后继节点」和「当前节点的随机指针指向的节点」的创建情况。如果这两个节点中的任何一个节点的新节点没有被创建，我们都立刻递归地进行创建。当我们拷贝完成，回溯到当前层时，我们即可完成当前节点的指针赋值。注意一个节点可能被多个其他节点指向，因此我们可能递归地多次尝试拷贝某个节点，为了防止重复拷贝，我们需要首先检查当前节点是否被拷贝过，如果已经拷贝过，我们可以直接从哈希表中取出拷贝后的节点的指针并返回即可。</p>\n<p>在实际代码中，我们需要特别判断给定节点为空节点的情况。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    Map&lt;Node, Node&gt; cachedNode = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Node, Node&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node <span class=\"title function_\">copyRandomList</span><span class=\"params\">(Node head)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cachedNode.containsKey(head)) &#123;</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">headNew</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(head.val);</span><br><span class=\"line\">            cachedNode.put(head, headNew);</span><br><span class=\"line\">            headNew.next = copyRandomList(head.next);</span><br><span class=\"line\">            headNew.random = copyRandomList(head.random);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cachedNode.get(head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>参考来源：力扣（LeetCode）</p>\n<p>作者：jyd</p>\n</blockquote>\n","categories":["LeetCode学习","链表"],"tags":["算法","链表","哈希表"]}]